{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NetworkResponseAdapter Introduction This library provides a Retrofit call adapter to handle errors as a part of state. It helps you write cleaner code for network requests by treating errors as values, instead of exceptions. Network Response NetworkResponse<S, E> is a Kotlin sealed class with the following states: Success: Represents successful responses (2xx response codes) ServerError: Represents Server errors NetworkError: Represents connectivity errors UnknownError: Represents every other kind of error which can not be classified as an API error or a network problem (eg JSON deserialization exceptions) It is generic on two types: a response ( S ), and an error ( E ). The response type is your Java/Kotlin representation of the API response, while the error type represents the error response sent by the API. Example data class DetailsResponse ( val details : String ) data class DetailsError ( val errorMessage : String ) interface Api { @Get ( \"/details) suspend fun details (): NetworkResponse < DetailsResponse , DetailsError > } class ViewModel { suspend fun fetchDetails () { when ( val response = api . details ()) { is NetworkResponse . Success -> handleSuccess ( response . body ) is NetworkResponse . ServerError -> handleServerError ( response . code ) is NetworkResponse . NetworkError -> handleNetworkError ( response . error ) is NetworkResponse . UnknownError -> handleUnknownError ( response . error ) } } } Installation Add the Jitpack repository to your list of repositories: allprojects { repositories { maven { url 'https://jitpack.io' } } } Then add the dependency in your gradle file: dependencies { implementation \"com.github.haroldadmin:NetworkResponseAdapter:(latest-version)\" } And finally, register NetworkResponseAdapter with Retrofit: val retrofit = Retrofit . Builder () . addCallAdapterFactory ( NetworkResponseAdapterFactory ()) ... // Other config . build () Note This library uses OkHttp 4, which requires Android API version 21+ and Java 8+. License Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Introduction"},{"location":"#networkresponseadapter","text":"","title":"NetworkResponseAdapter"},{"location":"#introduction","text":"This library provides a Retrofit call adapter to handle errors as a part of state. It helps you write cleaner code for network requests by treating errors as values, instead of exceptions.","title":"Introduction"},{"location":"#network-response","text":"NetworkResponse<S, E> is a Kotlin sealed class with the following states: Success: Represents successful responses (2xx response codes) ServerError: Represents Server errors NetworkError: Represents connectivity errors UnknownError: Represents every other kind of error which can not be classified as an API error or a network problem (eg JSON deserialization exceptions) It is generic on two types: a response ( S ), and an error ( E ). The response type is your Java/Kotlin representation of the API response, while the error type represents the error response sent by the API.","title":"Network Response"},{"location":"#example","text":"data class DetailsResponse ( val details : String ) data class DetailsError ( val errorMessage : String ) interface Api { @Get ( \"/details) suspend fun details (): NetworkResponse < DetailsResponse , DetailsError > } class ViewModel { suspend fun fetchDetails () { when ( val response = api . details ()) { is NetworkResponse . Success -> handleSuccess ( response . body ) is NetworkResponse . ServerError -> handleServerError ( response . code ) is NetworkResponse . NetworkError -> handleNetworkError ( response . error ) is NetworkResponse . UnknownError -> handleUnknownError ( response . error ) } } }","title":"Example"},{"location":"#installation","text":"Add the Jitpack repository to your list of repositories: allprojects { repositories { maven { url 'https://jitpack.io' } } } Then add the dependency in your gradle file: dependencies { implementation \"com.github.haroldadmin:NetworkResponseAdapter:(latest-version)\" } And finally, register NetworkResponseAdapter with Retrofit: val retrofit = Retrofit . Builder () . addCallAdapterFactory ( NetworkResponseAdapterFactory ()) ... // Other config . build () Note This library uses OkHttp 4, which requires Android API version 21+ and Java 8+.","title":"Installation"},{"location":"#license","text":"Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"benefits/","text":"Benefits Modelling errors as a part of your state is a recommended practice. This library helps you deal with scenarios where you can successfully recover from errors, and extract meaningful information from them too! NetworkResponseAdapter provides a much cleaner solution than Retrofit's built in Call type for dealing with errors. Call throws an exception on any kind of an error, leaving it up to you to catch it and parse it manually to figure out what went wrong. NetworkResponseAdapter does all of that for you and returns the result in an easily consumable NetworkResponse subtype. The RxJava retrofit adapter treats non 2xx response codes as errors, which seems silly in the context of Rx where errors terminate streams. Also, just like the Call<T> type, it makes you deal with all types of errors in an onError callback, where you have to manually parse it to find out exactly what went wrong. Using the Response class provided by Retrofit is cumbersome, as you have to manually parse error bodies with it.","title":"Benefits"},{"location":"benefits/#benefits","text":"Modelling errors as a part of your state is a recommended practice. This library helps you deal with scenarios where you can successfully recover from errors, and extract meaningful information from them too! NetworkResponseAdapter provides a much cleaner solution than Retrofit's built in Call type for dealing with errors. Call throws an exception on any kind of an error, leaving it up to you to catch it and parse it manually to figure out what went wrong. NetworkResponseAdapter does all of that for you and returns the result in an easily consumable NetworkResponse subtype. The RxJava retrofit adapter treats non 2xx response codes as errors, which seems silly in the context of Rx where errors terminate streams. Also, just like the Call<T> type, it makes you deal with all types of errors in an onError callback, where you have to manually parse it to find out exactly what went wrong. Using the Response class provided by Retrofit is cumbersome, as you have to manually parse error bodies with it.","title":"Benefits"},{"location":"extensions/","text":"Extensions Overloaded Invoke operator NetworkResponse also has an overloaded invoke operator. It returns the underlying data if the response is NetworkResponse.Success , or null otherwise. val usersResponse = usersRepo . getUsers (). await () println ( usersResponse () ?: \"No users were found\" ) Retrying network requests The executeWithRetry method shipped with this library can help you retry a network request without any boilerplate: suspend fun fetchDetails () { val response = executeWithRetry ( times = 5 ) { api . getDetails () } }","title":"Extensions"},{"location":"extensions/#extensions","text":"","title":"Extensions"},{"location":"extensions/#overloaded-invoke-operator","text":"NetworkResponse also has an overloaded invoke operator. It returns the underlying data if the response is NetworkResponse.Success , or null otherwise. val usersResponse = usersRepo . getUsers (). await () println ( usersResponse () ?: \"No users were found\" )","title":"Overloaded Invoke operator"},{"location":"extensions/#retrying-network-requests","text":"The executeWithRetry method shipped with this library can help you retry a network request without any boilerplate: suspend fun fetchDetails () { val response = executeWithRetry ( times = 5 ) { api . getDetails () } }","title":"Retrying network requests"},{"location":"special-cases/","text":"Special Cases Handling empty response bodies This library assumes that your server returns a parse-able response body even if the request fails. Empty bodies are treated as a server error. However, some operations rely solely on the returned response code. In such cases, the body is usually empty. Such endpoints must use Unit as the response type: suspend fun updateStatusOnServer (): NetworkResponse < Unit , ErrorType > Handling primitive responses The most common format for sending data over the wire is JSON. However, not all responses need JSON objects as sometimes primitive string suffice. To support a wide variety of response types, Retrofit supports adding custom converters. One such converter is the Scalars Converter which can handle primitive response types. To use it, use a primitive as your response type: interface Api { @GET ( \"/details\" ) suspend fun details (): NetworkResponse < String , String > } And then make sure that the Scalars converter is added to Retrofit before the JSON converter: val retrofit = Retrofit . Builder () . addCallAdapterFactory ( NetworkResponseAdapterFactory ()) . addConverterFactory ( ScalarsConverterFactory . create ()) . addConverterFactory ( MoshiConverterFactory . create ( moshi )) . baseUrl ( \"...\" ) . build ()","title":"Special Cases"},{"location":"special-cases/#special-cases","text":"","title":"Special Cases"},{"location":"special-cases/#handling-empty-response-bodies","text":"This library assumes that your server returns a parse-able response body even if the request fails. Empty bodies are treated as a server error. However, some operations rely solely on the returned response code. In such cases, the body is usually empty. Such endpoints must use Unit as the response type: suspend fun updateStatusOnServer (): NetworkResponse < Unit , ErrorType >","title":"Handling empty response bodies"},{"location":"special-cases/#handling-primitive-responses","text":"The most common format for sending data over the wire is JSON. However, not all responses need JSON objects as sometimes primitive string suffice. To support a wide variety of response types, Retrofit supports adding custom converters. One such converter is the Scalars Converter which can handle primitive response types. To use it, use a primitive as your response type: interface Api { @GET ( \"/details\" ) suspend fun details (): NetworkResponse < String , String > } And then make sure that the Scalars converter is added to Retrofit before the JSON converter: val retrofit = Retrofit . Builder () . addCallAdapterFactory ( NetworkResponseAdapterFactory ()) . addConverterFactory ( ScalarsConverterFactory . create ()) . addConverterFactory ( MoshiConverterFactory . create ( moshi )) . baseUrl ( \"...\" ) . build ()","title":"Handling primitive responses"},{"location":"api/","text":"// coroutines-network-response-adapter coroutines-network-response-adapter Packages Name Summary com.haroldadmin.cnradapter","title":"Index"},{"location":"api/#coroutines-network-response-adapter","text":"","title":"coroutines-network-response-adapter"},{"location":"api/#packages","text":"Name Summary com.haroldadmin.cnradapter","title":"Packages"},{"location":"api/com.haroldadmin.cnradapter/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter Package com.haroldadmin.cnradapter Types Name Summary CoroutinesNetworkResponseAdapterFactory [jvm] Brief description A Factory class to create instances of CoroutinesNetworkResponseAdapter Content ~~class~~ ~~CoroutinesNetworkResponseAdapterFactory~~ ~~:~~ ~~CallAdapter.Factory~~ NetworkResponse [jvm] Content sealed class NetworkResponse T : Any , out U : Any > NetworkResponseAdapter [jvm] Content class NetworkResponseAdapter < S : Any , E : Any >( successType : Type , errorBodyConverter : Converter E >) : CallAdapter< S , Call< NetworkResponse < S , E >>> NetworkResponseAdapterFactory [jvm] Content class NetworkResponseAdapterFactory : CallAdapter.Factory Functions Name Summary executeWithRetry [jvm] Brief description Retries the given block for the specified number of times in the case of NetworkResponse.NetworkError Content inline suspend fun < T : Any , U : Any > executeWithRetry (times: Int , initialDelay: Long , maxDelay: Long , factor: Double , block: SuspendFunction0 < NetworkResponse < T , U >>): NetworkResponse < T , U > invoke [jvm] Brief description Overloaded invoke operator to get the successful body or null in NetworkResponse class Content operator fun < T : Any , U : Any > NetworkResponse < T , U >. invoke (): T ?","title":"Index"},{"location":"api/com.haroldadmin.cnradapter/#package-comharoldadmincnradapter","text":"","title":"Package com.haroldadmin.cnradapter"},{"location":"api/com.haroldadmin.cnradapter/#types","text":"Name Summary CoroutinesNetworkResponseAdapterFactory [jvm] Brief description A Factory class to create instances of CoroutinesNetworkResponseAdapter Content ~~class~~ ~~CoroutinesNetworkResponseAdapterFactory~~ ~~:~~ ~~CallAdapter.Factory~~ NetworkResponse [jvm] Content sealed class NetworkResponse T : Any , out U : Any > NetworkResponseAdapter [jvm] Content class NetworkResponseAdapter < S : Any , E : Any >( successType : Type , errorBodyConverter : Converter E >) : CallAdapter< S , Call< NetworkResponse < S , E >>> NetworkResponseAdapterFactory [jvm] Content class NetworkResponseAdapterFactory : CallAdapter.Factory","title":"Types"},{"location":"api/com.haroldadmin.cnradapter/#functions","text":"Name Summary executeWithRetry [jvm] Brief description Retries the given block for the specified number of times in the case of NetworkResponse.NetworkError Content inline suspend fun < T : Any , U : Any > executeWithRetry (times: Int , initialDelay: Long , maxDelay: Long , factor: Double , block: SuspendFunction0 < NetworkResponse < T , U >>): NetworkResponse < T , U > invoke [jvm] Brief description Overloaded invoke operator to get the successful body or null in NetworkResponse class Content operator fun < T : Any , U : Any > NetworkResponse < T , U >. invoke (): T ?","title":"Functions"},{"location":"api/com.haroldadmin.cnradapter/execute-with-retry/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / executeWithRetry executeWithRetry [jvm] Brief description Retries the given block for the specified number of times in the case of NetworkResponse.NetworkError Return The NetworkResponse value whether it be successful or failed after retrying Parameters jvm Name Summary block The suspending function to be retried factor Multiply current delay time with this on each retry initialDelay The initial amount of time to wait before retrying maxDelay The max amount of time to wait before retrying T The success body type of NetworkResponse times The number of times this request should be retried U The error body type of NetworkResponse Content inline suspend fun < T : Any , U : Any > executeWithRetry (times: Int , initialDelay: Long , maxDelay: Long , factor: Double , block: SuspendFunction0 < NetworkResponse < T , U >>): NetworkResponse < T , U >","title":"Execute with retry"},{"location":"api/com.haroldadmin.cnradapter/execute-with-retry/#executewithretry","text":"[jvm] Brief description Retries the given block for the specified number of times in the case of NetworkResponse.NetworkError","title":"executeWithRetry"},{"location":"api/com.haroldadmin.cnradapter/execute-with-retry/#return","text":"The NetworkResponse value whether it be successful or failed after retrying","title":"Return"},{"location":"api/com.haroldadmin.cnradapter/execute-with-retry/#parameters","text":"jvm Name Summary block The suspending function to be retried factor Multiply current delay time with this on each retry initialDelay The initial amount of time to wait before retrying maxDelay The max amount of time to wait before retrying T The success body type of NetworkResponse times The number of times this request should be retried U The error body type of NetworkResponse Content inline suspend fun < T : Any , U : Any > executeWithRetry (times: Int , initialDelay: Long , maxDelay: Long , factor: Double , block: SuspendFunction0 < NetworkResponse < T , U >>): NetworkResponse < T , U >","title":"Parameters"},{"location":"api/com.haroldadmin.cnradapter/invoke/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / invoke invoke [jvm] Brief description Overloaded invoke operator to get the successful body or null in NetworkResponse class Parameters jvm Name Summary T the success body type of NetworkResponse U the error body type of NetworkResponse Example: val usersResponse = executeWithRetry { getUsers() } println(usersResponse() ?: \"No users found\") Content operator fun < T : Any , U : Any > NetworkResponse < T , U >. invoke (): T ?","title":"Invoke"},{"location":"api/com.haroldadmin.cnradapter/invoke/#invoke","text":"[jvm] Brief description Overloaded invoke operator to get the successful body or null in NetworkResponse class","title":"invoke"},{"location":"api/com.haroldadmin.cnradapter/invoke/#parameters","text":"jvm Name Summary T the success body type of NetworkResponse U the error body type of NetworkResponse Example: val usersResponse = executeWithRetry { getUsers() } println(usersResponse() ?: \"No users found\") Content operator fun < T : Any , U : Any > NetworkResponse < T , U >. invoke (): T ?","title":"Parameters"},{"location":"api/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / CoroutinesNetworkResponseAdapterFactory CoroutinesNetworkResponseAdapterFactory [jvm] A Factory class to create instances of CoroutinesNetworkResponseAdapter ~~class~~ ~~CoroutinesNetworkResponseAdapterFactory~~ ~~:~~ ~~CallAdapter.Factory~~ Types Name Summary Companion [jvm] Content object Companion Functions Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean get [jvm] Brief description Returns the Network Response call adapter if it is appropriate, or null otherwise Content open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >? hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Index"},{"location":"api/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/#coroutinesnetworkresponseadapterfactory","text":"[jvm] A Factory class to create instances of CoroutinesNetworkResponseAdapter ~~class~~ ~~CoroutinesNetworkResponseAdapterFactory~~ ~~:~~ ~~CallAdapter.Factory~~","title":"CoroutinesNetworkResponseAdapterFactory"},{"location":"api/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/#functions","text":"Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean get [jvm] Brief description Returns the Network Response call adapter if it is appropriate, or null otherwise Content open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >? hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/get/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / CoroutinesNetworkResponseAdapterFactory / get get [jvm] Brief description Returns the Network Response call adapter if it is appropriate, or null otherwise Content open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >?","title":"Get"},{"location":"api/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/get/#get","text":"[jvm] Brief description Returns the Network Response call adapter if it is appropriate, or null otherwise Content open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >?","title":"get"},{"location":"api/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/-companion/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / CoroutinesNetworkResponseAdapterFactory / Companion Companion [jvm] object Companion Functions Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int invoke [jvm] Content @ JvmStatic () @ JvmName (name = \"create\") operator fun invoke (): CoroutinesNetworkResponseAdapterFactory toString [jvm] Content open override fun toString (): String","title":"Index"},{"location":"api/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/-companion/#functions","text":"Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int invoke [jvm] Content @ JvmStatic () @ JvmName (name = \"create\") operator fun invoke (): CoroutinesNetworkResponseAdapterFactory toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/-companion/invoke/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / CoroutinesNetworkResponseAdapterFactory / Companion / invoke invoke [jvm] Content @ JvmStatic () @ JvmName (name = \"create\") operator fun invoke (): CoroutinesNetworkResponseAdapterFactory","title":"Invoke"},{"location":"api/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/-companion/invoke/#invoke","text":"[jvm] Content @ JvmStatic () @ JvmName (name = \"create\") operator fun invoke (): CoroutinesNetworkResponseAdapterFactory","title":"invoke"},{"location":"api/com.haroldadmin.cnradapter/-network-response/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse NetworkResponse [jvm] sealed class NetworkResponse T : Any , out U : Any > Types Name Summary NetworkError [jvm] Brief description A request that didn't result in a response. Content data class NetworkError ( error : IOException ) : NetworkResponse < Nothing , Nothing > ServerError [jvm] Brief description A request that resulted in a response with a non-2xx status code. Content data class ServerError < U : Any >( body : U ?, code : Int , headers : Headers?) : NetworkResponse < Nothing , U > Success [jvm] Brief description A request that resulted in a response with a 2xx status code that has a body. Content data class Success < T : Any >( body : T , headers : Headers?, code : Int ) : NetworkResponse < T , Nothing > UnknownError [jvm] Brief description A request that resulted in an error different from an IO or Server error. An example of such an error is JSON parsing exception thrown by a serialization library. Content data class UnknownError ( error : Throwable ) : NetworkResponse < Nothing , Nothing > Functions Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Inheritors Name NetworkResponse NetworkResponse NetworkResponse NetworkResponse Extensions Name Summary invoke [jvm] Brief description Overloaded invoke operator to get the successful body or null in NetworkResponse class Content operator fun < T : Any , U : Any > NetworkResponse < T , U >. invoke (): T ?","title":"Index"},{"location":"api/com.haroldadmin.cnradapter/-network-response/#networkresponse","text":"[jvm] sealed class NetworkResponse T : Any , out U : Any >","title":"NetworkResponse"},{"location":"api/com.haroldadmin.cnradapter/-network-response/#types","text":"Name Summary NetworkError [jvm] Brief description A request that didn't result in a response. Content data class NetworkError ( error : IOException ) : NetworkResponse < Nothing , Nothing > ServerError [jvm] Brief description A request that resulted in a response with a non-2xx status code. Content data class ServerError < U : Any >( body : U ?, code : Int , headers : Headers?) : NetworkResponse < Nothing , U > Success [jvm] Brief description A request that resulted in a response with a 2xx status code that has a body. Content data class Success < T : Any >( body : T , headers : Headers?, code : Int ) : NetworkResponse < T , Nothing > UnknownError [jvm] Brief description A request that resulted in an error different from an IO or Server error. An example of such an error is JSON parsing exception thrown by a serialization library. Content data class UnknownError ( error : Throwable ) : NetworkResponse < Nothing , Nothing >","title":"Types"},{"location":"api/com.haroldadmin.cnradapter/-network-response/#functions","text":"Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.haroldadmin.cnradapter/-network-response/#inheritors","text":"Name NetworkResponse NetworkResponse NetworkResponse NetworkResponse","title":"Inheritors"},{"location":"api/com.haroldadmin.cnradapter/-network-response/#extensions","text":"Name Summary invoke [jvm] Brief description Overloaded invoke operator to get the successful body or null in NetworkResponse class Content operator fun < T : Any , U : Any > NetworkResponse < T , U >. invoke (): T ?","title":"Extensions"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-network-error/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / NetworkError NetworkError [jvm] A request that didn't result in a response. data class NetworkError ( error : IOException ) : NetworkResponse < Nothing , Nothing > Constructors Name Summary NetworkError [jvm] fun NetworkError (error: IOException ) Functions Name Summary component1 [jvm] Content operator fun component1 (): IOException copy [jvm] Content fun copy (error: IOException ): NetworkResponse.NetworkError equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties Name Summary error [jvm] val error : IOException","title":"Index"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-network-error/#networkerror","text":"[jvm] A request that didn't result in a response. data class NetworkError ( error : IOException ) : NetworkResponse < Nothing , Nothing >","title":"NetworkError"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-network-error/#constructors","text":"Name Summary NetworkError [jvm] fun NetworkError (error: IOException )","title":"Constructors"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-network-error/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): IOException copy [jvm] Content fun copy (error: IOException ): NetworkResponse.NetworkError equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-network-error/#properties","text":"Name Summary error [jvm] val error : IOException","title":"Properties"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-network-error/-network-error/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / NetworkError / NetworkError NetworkError [jvm] Content fun NetworkError (error: IOException )","title":" network error"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-network-error/-network-error/#networkerror","text":"[jvm] Content fun NetworkError (error: IOException )","title":"NetworkError"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-network-error/component1/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / NetworkError / component1 component1 [jvm] Content operator fun component1 (): IOException","title":"Component1"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-network-error/component1/#component1","text":"[jvm] Content operator fun component1 (): IOException","title":"component1"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-network-error/copy/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / NetworkError / copy copy [jvm] Content fun copy (error: IOException ): NetworkResponse.NetworkError","title":"Copy"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-network-error/copy/#copy","text":"[jvm] Content fun copy (error: IOException ): NetworkResponse.NetworkError","title":"copy"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-server-error/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / ServerError ServerError [jvm] A request that resulted in a response with a non-2xx status code. data class ServerError < U : Any >( body : U ?, code : Int , headers : Headers?) : NetworkResponse < Nothing , U > Constructors Name Summary ServerError [jvm] fun < U : Any > ServerError (body: U ?, code: Int , headers: Headers?) Functions Name Summary component1 [jvm] Content operator fun component1 (): U ? component2 [jvm] Content operator fun component2 (): Int component3 [jvm] Content operator fun component3 (): Headers? copy [jvm] Content fun copy (body: U ?, code: Int , headers: Headers?): NetworkResponse.ServerError < U > equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties Name Summary body [jvm] val body : U ? code [jvm] val code : Int headers [jvm] val headers : Headers?","title":"Index"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-server-error/#servererror","text":"[jvm] A request that resulted in a response with a non-2xx status code. data class ServerError < U : Any >( body : U ?, code : Int , headers : Headers?) : NetworkResponse < Nothing , U >","title":"ServerError"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-server-error/#constructors","text":"Name Summary ServerError [jvm] fun < U : Any > ServerError (body: U ?, code: Int , headers: Headers?)","title":"Constructors"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-server-error/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): U ? component2 [jvm] Content operator fun component2 (): Int component3 [jvm] Content operator fun component3 (): Headers? copy [jvm] Content fun copy (body: U ?, code: Int , headers: Headers?): NetworkResponse.ServerError < U > equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-server-error/#properties","text":"Name Summary body [jvm] val body : U ? code [jvm] val code : Int headers [jvm] val headers : Headers?","title":"Properties"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-server-error/-server-error/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / ServerError / ServerError ServerError [jvm] Content fun < U : Any > ServerError (body: U ?, code: Int , headers: Headers?)","title":" server error"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-server-error/-server-error/#servererror","text":"[jvm] Content fun < U : Any > ServerError (body: U ?, code: Int , headers: Headers?)","title":"ServerError"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-server-error/component1/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / ServerError / component1 component1 [jvm] Content operator fun component1 (): U ?","title":"Component1"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-server-error/component1/#component1","text":"[jvm] Content operator fun component1 (): U ?","title":"component1"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-server-error/component2/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / ServerError / component2 component2 [jvm] Content operator fun component2 (): Int","title":"Component2"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-server-error/component2/#component2","text":"[jvm] Content operator fun component2 (): Int","title":"component2"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-server-error/component3/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / ServerError / component3 component3 [jvm] Content operator fun component3 (): Headers?","title":"Component3"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-server-error/component3/#component3","text":"[jvm] Content operator fun component3 (): Headers?","title":"component3"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-server-error/copy/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / ServerError / copy copy [jvm] Content fun copy (body: U ?, code: Int , headers: Headers?): NetworkResponse.ServerError < U >","title":"Copy"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-server-error/copy/#copy","text":"[jvm] Content fun copy (body: U ?, code: Int , headers: Headers?): NetworkResponse.ServerError < U >","title":"copy"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-success/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / Success Success [jvm] A request that resulted in a response with a 2xx status code that has a body. data class Success < T : Any >( body : T , headers : Headers?, code : Int ) : NetworkResponse < T , Nothing > Constructors Name Summary Success [jvm] fun < T : Any > Success (body: T , headers: Headers?, code: Int ) Functions Name Summary component1 [jvm] Content operator fun component1 (): T component2 [jvm] Content operator fun component2 (): Headers? component3 [jvm] Content operator fun component3 (): Int copy [jvm] Content fun copy (body: T , headers: Headers?, code: Int ): NetworkResponse.Success < T > equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties Name Summary body [jvm] val body : T code [jvm] val code : Int headers [jvm] val headers : Headers?","title":"Index"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-success/#success","text":"[jvm] A request that resulted in a response with a 2xx status code that has a body. data class Success < T : Any >( body : T , headers : Headers?, code : Int ) : NetworkResponse < T , Nothing >","title":"Success"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-success/#constructors","text":"Name Summary Success [jvm] fun < T : Any > Success (body: T , headers: Headers?, code: Int )","title":"Constructors"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-success/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): T component2 [jvm] Content operator fun component2 (): Headers? component3 [jvm] Content operator fun component3 (): Int copy [jvm] Content fun copy (body: T , headers: Headers?, code: Int ): NetworkResponse.Success < T > equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-success/#properties","text":"Name Summary body [jvm] val body : T code [jvm] val code : Int headers [jvm] val headers : Headers?","title":"Properties"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-success/-success/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / Success / Success Success [jvm] Content fun < T : Any > Success (body: T , headers: Headers?, code: Int )","title":" success"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-success/-success/#success","text":"[jvm] Content fun < T : Any > Success (body: T , headers: Headers?, code: Int )","title":"Success"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-success/component1/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / Success / component1 component1 [jvm] Content operator fun component1 (): T","title":"Component1"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-success/component1/#component1","text":"[jvm] Content operator fun component1 (): T","title":"component1"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-success/component2/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / Success / component2 component2 [jvm] Content operator fun component2 (): Headers?","title":"Component2"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-success/component2/#component2","text":"[jvm] Content operator fun component2 (): Headers?","title":"component2"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-success/component3/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / Success / component3 component3 [jvm] Content operator fun component3 (): Int","title":"Component3"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-success/component3/#component3","text":"[jvm] Content operator fun component3 (): Int","title":"component3"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-success/copy/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / Success / copy copy [jvm] Content fun copy (body: T , headers: Headers?, code: Int ): NetworkResponse.Success < T >","title":"Copy"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-success/copy/#copy","text":"[jvm] Content fun copy (body: T , headers: Headers?, code: Int ): NetworkResponse.Success < T >","title":"copy"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-unknown-error/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / UnknownError UnknownError [jvm] A request that resulted in an error different from an IO or Server error. An example of such an error is JSON parsing exception thrown by a serialization library. data class UnknownError ( error : Throwable ) : NetworkResponse < Nothing , Nothing > Constructors Name Summary UnknownError [jvm] fun UnknownError (error: Throwable ) Functions Name Summary component1 [jvm] Content operator fun component1 (): Throwable copy [jvm] Content fun copy (error: Throwable ): NetworkResponse.UnknownError equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties Name Summary error [jvm] val error : Throwable","title":"Index"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-unknown-error/#unknownerror","text":"[jvm] A request that resulted in an error different from an IO or Server error. An example of such an error is JSON parsing exception thrown by a serialization library. data class UnknownError ( error : Throwable ) : NetworkResponse < Nothing , Nothing >","title":"UnknownError"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-unknown-error/#constructors","text":"Name Summary UnknownError [jvm] fun UnknownError (error: Throwable )","title":"Constructors"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-unknown-error/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): Throwable copy [jvm] Content fun copy (error: Throwable ): NetworkResponse.UnknownError equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-unknown-error/#properties","text":"Name Summary error [jvm] val error : Throwable","title":"Properties"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-unknown-error/-unknown-error/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / UnknownError / UnknownError UnknownError [jvm] Content fun UnknownError (error: Throwable )","title":" unknown error"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-unknown-error/-unknown-error/#unknownerror","text":"[jvm] Content fun UnknownError (error: Throwable )","title":"UnknownError"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-unknown-error/component1/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / UnknownError / component1 component1 [jvm] Content operator fun component1 (): Throwable","title":"Component1"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-unknown-error/component1/#component1","text":"[jvm] Content operator fun component1 (): Throwable","title":"component1"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-unknown-error/copy/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / UnknownError / copy copy [jvm] Content fun copy (error: Throwable ): NetworkResponse.UnknownError","title":"Copy"},{"location":"api/com.haroldadmin.cnradapter/-network-response/-unknown-error/copy/#copy","text":"[jvm] Content fun copy (error: Throwable ): NetworkResponse.UnknownError","title":"copy"},{"location":"api/com.haroldadmin.cnradapter/-network-response-adapter/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponseAdapter NetworkResponseAdapter [jvm] class NetworkResponseAdapter < S : Any , E : Any >( successType : Type , errorBodyConverter : Converter E >) : CallAdapter< S , Call< NetworkResponse < S , E >>> Functions Name Summary adapt [jvm] Content open override fun adapt (call: Call< S >): Call< NetworkResponse < S , E >> equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int responseType [jvm] Content open override fun responseType (): Type toString [jvm] Content open override fun toString (): String","title":"Index"},{"location":"api/com.haroldadmin.cnradapter/-network-response-adapter/#networkresponseadapter","text":"[jvm] class NetworkResponseAdapter < S : Any , E : Any >( successType : Type , errorBodyConverter : Converter E >) : CallAdapter< S , Call< NetworkResponse < S , E >>>","title":"NetworkResponseAdapter"},{"location":"api/com.haroldadmin.cnradapter/-network-response-adapter/#functions","text":"Name Summary adapt [jvm] Content open override fun adapt (call: Call< S >): Call< NetworkResponse < S , E >> equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int responseType [jvm] Content open override fun responseType (): Type toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.haroldadmin.cnradapter/-network-response-adapter/-network-response-adapter/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponseAdapter / NetworkResponseAdapter NetworkResponseAdapter [jvm] Content fun < E : Any > NetworkResponseAdapter (successType: Type , errorBodyConverter: Converter E >)","title":" network response adapter"},{"location":"api/com.haroldadmin.cnradapter/-network-response-adapter/-network-response-adapter/#networkresponseadapter","text":"[jvm] Content fun < E : Any > NetworkResponseAdapter (successType: Type , errorBodyConverter: Converter E >)","title":"NetworkResponseAdapter"},{"location":"api/com.haroldadmin.cnradapter/-network-response-adapter/adapt/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponseAdapter / adapt adapt [jvm] Content open override fun adapt (call: Call< S >): Call< NetworkResponse < S , E >>","title":"Adapt"},{"location":"api/com.haroldadmin.cnradapter/-network-response-adapter/adapt/#adapt","text":"[jvm] Content open override fun adapt (call: Call< S >): Call< NetworkResponse < S , E >>","title":"adapt"},{"location":"api/com.haroldadmin.cnradapter/-network-response-adapter/response-type/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponseAdapter / responseType responseType [jvm] Content open override fun responseType (): Type","title":"Response type"},{"location":"api/com.haroldadmin.cnradapter/-network-response-adapter/response-type/#responsetype","text":"[jvm] Content open override fun responseType (): Type","title":"responseType"},{"location":"api/com.haroldadmin.cnradapter/-network-response-adapter-factory/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponseAdapterFactory NetworkResponseAdapterFactory [jvm] class NetworkResponseAdapterFactory : CallAdapter.Factory Functions Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean get [jvm] Content open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >? hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Index"},{"location":"api/com.haroldadmin.cnradapter/-network-response-adapter-factory/#networkresponseadapterfactory","text":"[jvm] class NetworkResponseAdapterFactory : CallAdapter.Factory","title":"NetworkResponseAdapterFactory"},{"location":"api/com.haroldadmin.cnradapter/-network-response-adapter-factory/#functions","text":"Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean get [jvm] Content open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >? hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.haroldadmin.cnradapter/-network-response-adapter-factory/-network-response-adapter-factory/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponseAdapterFactory / NetworkResponseAdapterFactory NetworkResponseAdapterFactory [jvm] Content fun NetworkResponseAdapterFactory ()","title":" network response adapter factory"},{"location":"api/com.haroldadmin.cnradapter/-network-response-adapter-factory/-network-response-adapter-factory/#networkresponseadapterfactory","text":"[jvm] Content fun NetworkResponseAdapterFactory ()","title":"NetworkResponseAdapterFactory"},{"location":"api/com.haroldadmin.cnradapter/-network-response-adapter-factory/get/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponseAdapterFactory / get get [jvm] Content open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >?","title":"Get"},{"location":"api/com.haroldadmin.cnradapter/-network-response-adapter-factory/get/#get","text":"[jvm] Content open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >?","title":"get"}]}