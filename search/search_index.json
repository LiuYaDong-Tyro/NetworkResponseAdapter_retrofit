{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NetworkResponseAdapter Introduction This library provides a Kotlin Coroutines based Retrofit call adapter for wrapping your API responses in a NetworkResponse type. See Installation for setup instructions. Network Response NetworkResponse<S, E> is a Kotlin sealed interface with the following states: Success : Represents successful network calls (2xx response codes) Error : Represents unsuccessful network calls ServerError : Server errors (non 2xx responses) NetworkError : IO Errors, connectivity problems UnknownError : Any other errors, like serialization exceptions It is generic on two types: a success response ( S ), and an error response ( E ). S : Kotlin representation of a successful API response E : Representation of an unsuccessful API response Usage Suppose an API returns the following body for a successful response: Successful Response { \"name\" : \"John doe\" , \"age\" : 21 } And this for an unsuccessful response: Error Response { \"message\" : \"The requested person was not found\" } You can create two data classes to model the these responses: data class PersonResponse ( val name : String , val age : Int ) data class ErrorResponse ( val message : String ) Then modify your Retrofit service to return a NetworkResponse : @GET ( \"/person\" ) suspend fun getPerson (): NetworkResponse < PersonResponse , ErrorResponse >> // You can also request for `Deferred` responses @GET ( \"/person\" ) fun getPersonAsync (): Deferred < NetworkResponse < PersonResponse , ErrorResponse >> Finally, add this call adapter factory to your Retrofit instance: Retrofit . Builder () . addCallAdapterFactory ( NetworkResponseAdapterFactory ()) . build () And voila! You can now consume your API as: // Repository.kt suspend fun getPerson () { when ( val person = apiService . getPerson ()) { is NetworkResponse . Success -> { /* Successful response */ } is NetworkResponse . Error -> { /* Handle error */ } } // Or, if you care about the type of the error: when ( val person = apiService . getPerson ()) { is NetworkResponse . Success -> { /* ... */ } is NetworkResponse . ServerError -> { /* ... */ } is NetworkResponse . NetworkError -> { /* ... */ } is NetworkResponse . UnknownError -> { /* ... */ } } } See Special Cases for dealing with more complicated scenarios. Benefits Modelling errors as a part of your state is a recommended practice. This library helps you deal with scenarios where you can successfully recover from errors, and extract meaningful information from them too! NetworkResponseAdapter provides a much cleaner solution than Retrofit's built in Call type for dealing with errors. Call throws an exception on any kind of an error, leaving it up to you to catch it and parse it manually to figure out what went wrong. NetworkResponseAdapter does all of that for you and returns the result in an easily consumable NetworkResponse subtype. The RxJava retrofit adapter treats non 2xx response codes as errors, which seems silly in the context of Rx where errors terminate streams. Also, just like the Call<T> type, it makes you deal with all types of errors in an onError callback, where you have to manually parse it to find out exactly what went wrong. Using the Response class provided by Retrofit is cumbersome, as you have to manually parse error bodies with it. Installation Add the Jitpack repository to your list of repositories: allprojects { repositories { maven { url 'https://jitpack.io' } } } And then add the dependency in your gradle file: dependencies { implementation \"com.github.haroldadmin:NetworkResponseAdapter:(latest-version)\" } This library uses OkHttp 4, which requires Android API version 21+ and Java 8+ License Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Introduction"},{"location":"#networkresponseadapter","text":"","title":"NetworkResponseAdapter"},{"location":"#introduction","text":"This library provides a Kotlin Coroutines based Retrofit call adapter for wrapping your API responses in a NetworkResponse type. See Installation for setup instructions.","title":"Introduction"},{"location":"#network-response","text":"NetworkResponse<S, E> is a Kotlin sealed interface with the following states: Success : Represents successful network calls (2xx response codes) Error : Represents unsuccessful network calls ServerError : Server errors (non 2xx responses) NetworkError : IO Errors, connectivity problems UnknownError : Any other errors, like serialization exceptions It is generic on two types: a success response ( S ), and an error response ( E ). S : Kotlin representation of a successful API response E : Representation of an unsuccessful API response","title":"Network Response"},{"location":"#usage","text":"Suppose an API returns the following body for a successful response: Successful Response { \"name\" : \"John doe\" , \"age\" : 21 } And this for an unsuccessful response: Error Response { \"message\" : \"The requested person was not found\" } You can create two data classes to model the these responses: data class PersonResponse ( val name : String , val age : Int ) data class ErrorResponse ( val message : String ) Then modify your Retrofit service to return a NetworkResponse : @GET ( \"/person\" ) suspend fun getPerson (): NetworkResponse < PersonResponse , ErrorResponse >> // You can also request for `Deferred` responses @GET ( \"/person\" ) fun getPersonAsync (): Deferred < NetworkResponse < PersonResponse , ErrorResponse >> Finally, add this call adapter factory to your Retrofit instance: Retrofit . Builder () . addCallAdapterFactory ( NetworkResponseAdapterFactory ()) . build () And voila! You can now consume your API as: // Repository.kt suspend fun getPerson () { when ( val person = apiService . getPerson ()) { is NetworkResponse . Success -> { /* Successful response */ } is NetworkResponse . Error -> { /* Handle error */ } } // Or, if you care about the type of the error: when ( val person = apiService . getPerson ()) { is NetworkResponse . Success -> { /* ... */ } is NetworkResponse . ServerError -> { /* ... */ } is NetworkResponse . NetworkError -> { /* ... */ } is NetworkResponse . UnknownError -> { /* ... */ } } } See Special Cases for dealing with more complicated scenarios.","title":"Usage"},{"location":"#benefits","text":"Modelling errors as a part of your state is a recommended practice. This library helps you deal with scenarios where you can successfully recover from errors, and extract meaningful information from them too! NetworkResponseAdapter provides a much cleaner solution than Retrofit's built in Call type for dealing with errors. Call throws an exception on any kind of an error, leaving it up to you to catch it and parse it manually to figure out what went wrong. NetworkResponseAdapter does all of that for you and returns the result in an easily consumable NetworkResponse subtype. The RxJava retrofit adapter treats non 2xx response codes as errors, which seems silly in the context of Rx where errors terminate streams. Also, just like the Call<T> type, it makes you deal with all types of errors in an onError callback, where you have to manually parse it to find out exactly what went wrong. Using the Response class provided by Retrofit is cumbersome, as you have to manually parse error bodies with it.","title":"Benefits"},{"location":"#installation","text":"Add the Jitpack repository to your list of repositories: allprojects { repositories { maven { url 'https://jitpack.io' } } } And then add the dependency in your gradle file: dependencies { implementation \"com.github.haroldadmin:NetworkResponseAdapter:(latest-version)\" } This library uses OkHttp 4, which requires Android API version 21+ and Java 8+","title":"Installation"},{"location":"#license","text":"Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"extensions/","text":"Extensions Overloaded Invoke operator NetworkResponse also has an overloaded invoke operator. It returns the underlying data if the response is NetworkResponse.Success , or null otherwise. val usersResponse = usersRepo . getUsers (). await () println ( usersResponse () ?: \"No users were found\" ) Retrying network requests The executeWithRetry method shipped with this library can help you retry a network request without any boilerplate: suspend fun fetchDetails () { val response = executeWithRetry ( times = 5 ) { api . getDetails () } }","title":"Extensions"},{"location":"extensions/#extensions","text":"","title":"Extensions"},{"location":"extensions/#overloaded-invoke-operator","text":"NetworkResponse also has an overloaded invoke operator. It returns the underlying data if the response is NetworkResponse.Success , or null otherwise. val usersResponse = usersRepo . getUsers (). await () println ( usersResponse () ?: \"No users were found\" )","title":"Overloaded Invoke operator"},{"location":"extensions/#retrying-network-requests","text":"The executeWithRetry method shipped with this library can help you retry a network request without any boilerplate: suspend fun fetchDetails () { val response = executeWithRetry ( times = 5 ) { api . getDetails () } }","title":"Retrying network requests"},{"location":"projects/","text":"Projects and Endorsements NetworkResponseAdapter receives ~19,000 downloads a month according to Jitpack stats (as of Jan 26, 2022). The Android app for SkipTheDishes uses this library (source: Gil Goldzweig Goldbaum, Twitter) A popular medium article for Retrofit error handling recommends this library: Handling errors with Retrofit and Coroutines in a single place Donn Felker endorsed the library. If you'd like to see your project featured here, please comment on this issue: https://github.com/haroldadmin/NetworkResponseAdapter/issues/55 You can also contact me via Twitter .","title":"Projects"},{"location":"projects/#projects-and-endorsements","text":"NetworkResponseAdapter receives ~19,000 downloads a month according to Jitpack stats (as of Jan 26, 2022). The Android app for SkipTheDishes uses this library (source: Gil Goldzweig Goldbaum, Twitter) A popular medium article for Retrofit error handling recommends this library: Handling errors with Retrofit and Coroutines in a single place Donn Felker endorsed the library. If you'd like to see your project featured here, please comment on this issue: https://github.com/haroldadmin/NetworkResponseAdapter/issues/55 You can also contact me via Twitter .","title":"Projects and Endorsements"},{"location":"special-cases/","text":"Special Cases Handling empty response bodies Some operations rely solely on the returned response code. In such cases, the body is usually empty. Use Unit as the response type for such APIs: suspend fun updateStatusOnServer (): NetworkResponse < Unit , ErrorType > If your server sometimes returns a body and sometimes doesn't (200 vs 204 status code), then consider using the bundled raw Retrofit response. interface PostsService { @GET ( \"/\" ) suspend fun getPost (): NetworkResponse < Unit , ErrorResponse > } when ( val postResponse = service . getPost ()) { is NetworkResponse . Success -> { if ( postResponse . code != 204 ) { val rawBody = postResponse . response . rawBody () // Manually parse the raw body to access the response } } is NetworkResponse . Error -> { ... } } Handling primitive responses The most common format for sending data over the wire is JSON. However, not all responses need JSON objects as sometimes primitive string suffice. To support a wide variety of response types, Retrofit supports adding custom converters. One such converter is the Scalars Converter which can handle primitive response types. To use it, use a primitive as your response type: interface Api { @GET ( \"/details\" ) suspend fun details (): NetworkResponse < String , String > } And then make sure that the Scalars converter is added to Retrofit before the JSON converter: val retrofit = Retrofit . Builder () . addCallAdapterFactory ( NetworkResponseAdapterFactory ()) . addConverterFactory ( ScalarsConverterFactory . create ()) . addConverterFactory ( MoshiConverterFactory . create ( moshi )) . baseUrl ( \"...\" ) . build () Raw Retrofit Responses Responses of type NetworkResponse.Success , NetworkResponse.ServerError and NetworkResponse.UnknownError are bundled with the raw Retrofit Response object (if available). This allows you to interact with raw response in case you ever need it: when ( networkResponse ) { is NetworkResponse . Success -> { val statusCode = networkResponse . response . code () } }","title":"Special Cases"},{"location":"special-cases/#special-cases","text":"","title":"Special Cases"},{"location":"special-cases/#handling-empty-response-bodies","text":"Some operations rely solely on the returned response code. In such cases, the body is usually empty. Use Unit as the response type for such APIs: suspend fun updateStatusOnServer (): NetworkResponse < Unit , ErrorType > If your server sometimes returns a body and sometimes doesn't (200 vs 204 status code), then consider using the bundled raw Retrofit response. interface PostsService { @GET ( \"/\" ) suspend fun getPost (): NetworkResponse < Unit , ErrorResponse > } when ( val postResponse = service . getPost ()) { is NetworkResponse . Success -> { if ( postResponse . code != 204 ) { val rawBody = postResponse . response . rawBody () // Manually parse the raw body to access the response } } is NetworkResponse . Error -> { ... } }","title":"Handling empty response bodies"},{"location":"special-cases/#handling-primitive-responses","text":"The most common format for sending data over the wire is JSON. However, not all responses need JSON objects as sometimes primitive string suffice. To support a wide variety of response types, Retrofit supports adding custom converters. One such converter is the Scalars Converter which can handle primitive response types. To use it, use a primitive as your response type: interface Api { @GET ( \"/details\" ) suspend fun details (): NetworkResponse < String , String > } And then make sure that the Scalars converter is added to Retrofit before the JSON converter: val retrofit = Retrofit . Builder () . addCallAdapterFactory ( NetworkResponseAdapterFactory ()) . addConverterFactory ( ScalarsConverterFactory . create ()) . addConverterFactory ( MoshiConverterFactory . create ( moshi )) . baseUrl ( \"...\" ) . build ()","title":"Handling primitive responses"},{"location":"special-cases/#raw-retrofit-responses","text":"Responses of type NetworkResponse.Success , NetworkResponse.ServerError and NetworkResponse.UnknownError are bundled with the raw Retrofit Response object (if available). This allows you to interact with raw response in case you ever need it: when ( networkResponse ) { is NetworkResponse . Success -> { val statusCode = networkResponse . response . code () } }","title":"Raw Retrofit Responses"},{"location":"api/","text":"// NetworkResponseAdapter NetworkResponseAdapter Packages Name com.haroldadmin.cnradapter","title":"Index"},{"location":"api/#networkresponseadapter","text":"","title":"NetworkResponseAdapter"},{"location":"api/#packages","text":"Name com.haroldadmin.cnradapter","title":"Packages"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter Package com.haroldadmin.cnradapter Types Name Summary CompletableResponse [jvm] typealias CompletableResponse < E > = NetworkResponse < Unit , E > An alias for a NetworkResponse with no expected response body ( Unit ). Useful for specifying return types of API calls that do not return a useful value. NetworkResponse [jvm] interface NetworkResponse < S , E > Represents the result of a network request made using Retrofit. It can be either in a success state or an error state, depending on the result of the request. NetworkResponseAdapterFactory [jvm] class NetworkResponseAdapterFactory : CallAdapter.Factory A Call Adapter Factory for Retrofit service methods that return NetworkResponse<S, E> or Deferred<NetworkResponse<S, E>>. Functions Name Summary executeWithRetry [jvm] inline suspend fun < T : Any , U : Any > executeWithRetry (times: Int = 10, initialDelay: Long = 100, maxDelay: Long = 1000, factor: Double = 2.0, block: suspend () -> NetworkResponse < T , U >): NetworkResponse < T , U > Retries the given block for the specified number of times in the case of NetworkResponse.NetworkError invoke [jvm] operator fun < T : Any , U : Any > NetworkResponse < T , U >. invoke (): T ? Overloaded invoke operator to get the successful body or null in NetworkResponse class","title":"Index"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/#package-comharoldadmincnradapter","text":"","title":"Package com.haroldadmin.cnradapter"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/#types","text":"Name Summary CompletableResponse [jvm] typealias CompletableResponse < E > = NetworkResponse < Unit , E > An alias for a NetworkResponse with no expected response body ( Unit ). Useful for specifying return types of API calls that do not return a useful value. NetworkResponse [jvm] interface NetworkResponse < S , E > Represents the result of a network request made using Retrofit. It can be either in a success state or an error state, depending on the result of the request. NetworkResponseAdapterFactory [jvm] class NetworkResponseAdapterFactory : CallAdapter.Factory A Call Adapter Factory for Retrofit service methods that return NetworkResponse<S, E> or Deferred<NetworkResponse<S, E>>.","title":"Types"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/#functions","text":"Name Summary executeWithRetry [jvm] inline suspend fun < T : Any , U : Any > executeWithRetry (times: Int = 10, initialDelay: Long = 100, maxDelay: Long = 1000, factor: Double = 2.0, block: suspend () -> NetworkResponse < T , U >): NetworkResponse < T , U > Retries the given block for the specified number of times in the case of NetworkResponse.NetworkError invoke [jvm] operator fun < T : Any , U : Any > NetworkResponse < T , U >. invoke (): T ? Overloaded invoke operator to get the successful body or null in NetworkResponse class","title":"Functions"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/execute-with-retry/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / executeWithRetry executeWithRetry [jvm]\\ inline suspend fun < T : Any , U : Any > executeWithRetry (times: Int = 10, initialDelay: Long = 100, maxDelay: Long = 1000, factor: Double = 2.0, block: suspend () -> NetworkResponse < T , U >): NetworkResponse < T , U > Retries the given block for the specified number of times in the case of NetworkResponse.NetworkError Return The NetworkResponse value whether it be successful or failed after retrying Parameters jvm T The success body type of NetworkResponse U The error body type of NetworkResponse times The number of times this request should be retried initialDelay The initial amount of time to wait before retrying maxDelay The max amount of time to wait before retrying factor Multiply current delay time with this on each retry block The suspending function to be retried","title":"Execute with retry"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/execute-with-retry/#executewithretry","text":"[jvm]\\ inline suspend fun < T : Any , U : Any > executeWithRetry (times: Int = 10, initialDelay: Long = 100, maxDelay: Long = 1000, factor: Double = 2.0, block: suspend () -> NetworkResponse < T , U >): NetworkResponse < T , U > Retries the given block for the specified number of times in the case of NetworkResponse.NetworkError","title":"executeWithRetry"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/execute-with-retry/#return","text":"The NetworkResponse value whether it be successful or failed after retrying","title":"Return"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/execute-with-retry/#parameters","text":"jvm T The success body type of NetworkResponse U The error body type of NetworkResponse times The number of times this request should be retried initialDelay The initial amount of time to wait before retrying maxDelay The max amount of time to wait before retrying factor Multiply current delay time with this on each retry block The suspending function to be retried","title":"Parameters"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/invoke/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / invoke invoke [jvm]\\ operator fun < T : Any , U : Any > NetworkResponse < T , U >. invoke (): T ? Overloaded invoke operator to get the successful body or null in NetworkResponse class Parameters jvm T the success body type of NetworkResponse U the error body type of NetworkResponse Example: val usersResponse = executeWithRetry { getUsers() } println(usersResponse() ?: \"No users found\")","title":"Invoke"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/invoke/#invoke","text":"[jvm]\\ operator fun < T : Any , U : Any > NetworkResponse < T , U >. invoke (): T ? Overloaded invoke operator to get the successful body or null in NetworkResponse class","title":"invoke"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/invoke/#parameters","text":"jvm T the success body type of NetworkResponse U the error body type of NetworkResponse Example: val usersResponse = executeWithRetry { getUsers() } println(usersResponse() ?: \"No users found\")","title":"Parameters"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse NetworkResponse [jvm]\\ interface NetworkResponse < S , E > Represents the result of a network request made using Retrofit. It can be either in a success state or an error state, depending on the result of the request. S represents the deserialized body of a successful response. E represents the deserialized body of an unsuccessful response. A network request is considered to be successful if it received a 2xx response code, and unsuccessful otherwise. If the network request was successful and Retrofit successfully deserialized the body, the NetworkResponse is NetworkResponse.Success . If you do not expect a successful response to contain a body, you must specify S as Unit or use CompletableResponse . If the network request failed due to: Non-2xx response from the server, the NetworkResponse is NetworkResponse.ServerError containing the deserialized body of the response ( E ) Internet connectivity problems, the NetworkResponse is NetworkResponse.NetworkError Any other problems (e.g. Serialization errors), the NetworkResponse is NetworkResponse.UnknownError . Types Name Summary Error [jvm] interface Error < S , E > : NetworkResponse < S , E > The result of a failed network request. NetworkError [jvm] data class NetworkError < S , E >(error: IOException ) : NetworkResponse.Error < S , E > The result of a network connectivity error ServerError [jvm] data class ServerError < S , E >(body: E ?, response: Response<*>?) : NetworkResponse.Error < S , E > The result of a non 2xx response to a network request. Success [jvm] data class Success < S , E >(body: S , response: Response<*>) : NetworkResponse < S , E > The result of a successful network request. UnknownError [jvm] data class UnknownError < S , E >(error: Throwable , response: Response<*>?) : NetworkResponse.Error < S , E > Result of an unknown error during a network request (e.g. Serialization errors) Inheritors Name Success Error Extensions Name Summary invoke [jvm] operator fun < T : Any , U : Any > NetworkResponse < T , U >. invoke (): T ? Overloaded invoke operator to get the successful body or null in NetworkResponse class","title":"Index"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/#networkresponse","text":"[jvm]\\ interface NetworkResponse < S , E > Represents the result of a network request made using Retrofit. It can be either in a success state or an error state, depending on the result of the request. S represents the deserialized body of a successful response. E represents the deserialized body of an unsuccessful response. A network request is considered to be successful if it received a 2xx response code, and unsuccessful otherwise. If the network request was successful and Retrofit successfully deserialized the body, the NetworkResponse is NetworkResponse.Success . If you do not expect a successful response to contain a body, you must specify S as Unit or use CompletableResponse . If the network request failed due to: Non-2xx response from the server, the NetworkResponse is NetworkResponse.ServerError containing the deserialized body of the response ( E ) Internet connectivity problems, the NetworkResponse is NetworkResponse.NetworkError Any other problems (e.g. Serialization errors), the NetworkResponse is NetworkResponse.UnknownError .","title":"NetworkResponse"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/#types","text":"Name Summary Error [jvm] interface Error < S , E > : NetworkResponse < S , E > The result of a failed network request. NetworkError [jvm] data class NetworkError < S , E >(error: IOException ) : NetworkResponse.Error < S , E > The result of a network connectivity error ServerError [jvm] data class ServerError < S , E >(body: E ?, response: Response<*>?) : NetworkResponse.Error < S , E > The result of a non 2xx response to a network request. Success [jvm] data class Success < S , E >(body: S , response: Response<*>) : NetworkResponse < S , E > The result of a successful network request. UnknownError [jvm] data class UnknownError < S , E >(error: Throwable , response: Response<*>?) : NetworkResponse.Error < S , E > Result of an unknown error during a network request (e.g. Serialization errors)","title":"Types"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/#inheritors","text":"Name Success Error","title":"Inheritors"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/#extensions","text":"Name Summary invoke [jvm] operator fun < T : Any , U : Any > NetworkResponse < T , U >. invoke (): T ? Overloaded invoke operator to get the successful body or null in NetworkResponse class","title":"Extensions"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-error/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / Error Error [jvm]\\ interface Error < S , E > : NetworkResponse < S , E > The result of a failed network request. A failed network request can either be due to a non-2xx response code and contain an error body ( ServerError ), or due to a connectivity error ( NetworkError ), or due to an unknown error ( UnknownError ). Properties Name Summary body [jvm] abstract val body : E ? The body of the failed network request, if available. error [jvm] abstract val error : Throwable ? The underlying error of the failed network request, if available. Inheritors Name ServerError NetworkError UnknownError","title":"Index"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-error/#error","text":"[jvm]\\ interface Error < S , E > : NetworkResponse < S , E > The result of a failed network request. A failed network request can either be due to a non-2xx response code and contain an error body ( ServerError ), or due to a connectivity error ( NetworkError ), or due to an unknown error ( UnknownError ).","title":"Error"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-error/#properties","text":"Name Summary body [jvm] abstract val body : E ? The body of the failed network request, if available. error [jvm] abstract val error : Throwable ? The underlying error of the failed network request, if available.","title":"Properties"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-error/#inheritors","text":"Name ServerError NetworkError UnknownError","title":"Inheritors"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-error/body/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / Error / body body [jvm]\\ abstract val body : E ? The body of the failed network request, if available.","title":"Body"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-error/body/#body","text":"[jvm]\\ abstract val body : E ? The body of the failed network request, if available.","title":"body"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-error/error/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / Error / error error [jvm]\\ abstract val error : Throwable ? The underlying error of the failed network request, if available.","title":"Error"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-error/error/#error","text":"[jvm]\\ abstract val error : Throwable ? The underlying error of the failed network request, if available.","title":"error"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-network-error/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / NetworkError NetworkError [jvm]\\ data class NetworkError < S , E >(error: IOException ) : NetworkResponse.Error < S , E > The result of a network connectivity error Constructors NetworkError [jvm] fun NetworkError (error: IOException ) Properties Name Summary body [jvm] open override val body : E ? = null Always null for a NetworkError error [jvm] open override val error : IOException The underlying error of the failed network request, if available.","title":"Index"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-network-error/#networkerror","text":"[jvm]\\ data class NetworkError < S , E >(error: IOException ) : NetworkResponse.Error < S , E > The result of a network connectivity error","title":"NetworkError"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-network-error/#constructors","text":"NetworkError [jvm] fun NetworkError (error: IOException )","title":"Constructors"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-network-error/#properties","text":"Name Summary body [jvm] open override val body : E ? = null Always null for a NetworkError error [jvm] open override val error : IOException The underlying error of the failed network request, if available.","title":"Properties"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-network-error/-network-error/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / NetworkError / NetworkError NetworkError [jvm]\\ fun NetworkError (error: IOException )","title":" network error"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-network-error/-network-error/#networkerror","text":"[jvm]\\ fun NetworkError (error: IOException )","title":"NetworkError"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-network-error/body/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / NetworkError / body body [jvm]\\ open override val body : E ? = null Always null for a NetworkError","title":"Body"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-network-error/body/#body","text":"[jvm]\\ open override val body : E ? = null Always null for a NetworkError","title":"body"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-network-error/error/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / NetworkError / error error [jvm]\\ open override val error : IOException The underlying error of the failed network request, if available.","title":"Error"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-network-error/error/#error","text":"[jvm]\\ open override val error : IOException The underlying error of the failed network request, if available.","title":"error"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / ServerError ServerError [jvm]\\ data class ServerError < S , E >(body: E ?, response: Response<*>?) : NetworkResponse.Error < S , E > The result of a non 2xx response to a network request. This result may or may not contain a body , depending on the body supplied by the server. Constructors ServerError [jvm] fun < E > ServerError (body: E ?, response: Response<*>?) Properties Name Summary body [jvm] open override val body : E ? The body of the failed network request, if available. code [jvm] val code : Int ? The status code returned by the server. error [jvm] open override val error : Throwable ? = null Always null for a ServerError . headers [jvm] val headers : Headers? The headers returned by the server. response [jvm] val response : Response<*>?","title":"Index"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/#servererror","text":"[jvm]\\ data class ServerError < S , E >(body: E ?, response: Response<*>?) : NetworkResponse.Error < S , E > The result of a non 2xx response to a network request. This result may or may not contain a body , depending on the body supplied by the server.","title":"ServerError"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/#constructors","text":"ServerError [jvm] fun < E > ServerError (body: E ?, response: Response<*>?)","title":"Constructors"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/#properties","text":"Name Summary body [jvm] open override val body : E ? The body of the failed network request, if available. code [jvm] val code : Int ? The status code returned by the server. error [jvm] open override val error : Throwable ? = null Always null for a ServerError . headers [jvm] val headers : Headers? The headers returned by the server. response [jvm] val response : Response<*>?","title":"Properties"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/-server-error/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / ServerError / ServerError ServerError [jvm]\\ fun < E > ServerError (body: E ?, response: Response<*>?)","title":" server error"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/-server-error/#servererror","text":"[jvm]\\ fun < E > ServerError (body: E ?, response: Response<*>?)","title":"ServerError"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/body/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / ServerError / body body [jvm]\\ open override val body : E ? The body of the failed network request, if available.","title":"Body"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/body/#body","text":"[jvm]\\ open override val body : E ? The body of the failed network request, if available.","title":"body"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/code/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / ServerError / code code [jvm]\\ val code : Int ? The status code returned by the server. Alias for Response.code of the original response","title":"Code"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/code/#code","text":"[jvm]\\ val code : Int ? The status code returned by the server. Alias for Response.code of the original response","title":"code"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/error/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / ServerError / error error [jvm]\\ open override val error : Throwable ? = null Always null for a ServerError .","title":"Error"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/error/#error","text":"[jvm]\\ open override val error : Throwable ? = null Always null for a ServerError .","title":"error"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/headers/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / ServerError / headers headers [jvm]\\ val headers : Headers? The headers returned by the server. Alias for Response.headers of the original response","title":"Headers"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/headers/#headers","text":"[jvm]\\ val headers : Headers? The headers returned by the server. Alias for Response.headers of the original response","title":"headers"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/response/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / ServerError / response response [jvm]\\ val response : Response<*>?","title":"Response"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/response/#response","text":"[jvm]\\ val response : Response<*>?","title":"response"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / Success Success [jvm]\\ data class Success < S , E >(body: S , response: Response<*>) : NetworkResponse < S , E > The result of a successful network request. If you expect your server response to not contain a body, set the success body type ( S ) to Unit . If you expect your server response to sometimes not contain a body (e.g. for response code 204), set S to Unit and deserialize the raw response manually when needed. Parameters jvm body The parsed body of the successful response. response The original Response from Retrofit Constructors Success [jvm] fun < S > Success (body: S , response: Response<*>) Properties Name Summary body [jvm] val body : S code [jvm] val code : Int The status code returned by the server. headers [jvm] val headers : Headers The headers returned by the server. response [jvm] val response : Response<*>","title":"Index"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/#success","text":"[jvm]\\ data class Success < S , E >(body: S , response: Response<*>) : NetworkResponse < S , E > The result of a successful network request. If you expect your server response to not contain a body, set the success body type ( S ) to Unit . If you expect your server response to sometimes not contain a body (e.g. for response code 204), set S to Unit and deserialize the raw response manually when needed.","title":"Success"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/#parameters","text":"jvm body The parsed body of the successful response. response The original Response from Retrofit","title":"Parameters"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/#constructors","text":"Success [jvm] fun < S > Success (body: S , response: Response<*>)","title":"Constructors"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/#properties","text":"Name Summary body [jvm] val body : S code [jvm] val code : Int The status code returned by the server. headers [jvm] val headers : Headers The headers returned by the server. response [jvm] val response : Response<*>","title":"Properties"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/-success/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / Success / Success Success [jvm]\\ fun < S > Success (body: S , response: Response<*>) Parameters jvm body The parsed body of the successful response. response The original Response from Retrofit","title":" success"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/-success/#success","text":"[jvm]\\ fun < S > Success (body: S , response: Response<*>)","title":"Success"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/-success/#parameters","text":"jvm body The parsed body of the successful response. response The original Response from Retrofit","title":"Parameters"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/body/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / Success / body body [jvm]\\ val body : S","title":"Body"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/body/#body","text":"[jvm]\\ val body : S","title":"body"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/code/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / Success / code code [jvm]\\ val code : Int The status code returned by the server. Alias for Response.code of the original response","title":"Code"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/code/#code","text":"[jvm]\\ val code : Int The status code returned by the server. Alias for Response.code of the original response","title":"code"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/headers/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / Success / headers headers [jvm]\\ val headers : Headers The headers returned by the server. Alias for Response.headers of the original response","title":"Headers"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/headers/#headers","text":"[jvm]\\ val headers : Headers The headers returned by the server. Alias for Response.headers of the original response","title":"headers"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/response/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / Success / response response [jvm]\\ val response : Response<*>","title":"Response"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/response/#response","text":"[jvm]\\ val response : Response<*>","title":"response"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / UnknownError UnknownError [jvm]\\ data class UnknownError < S , E >(error: Throwable , response: Response<*>?) : NetworkResponse.Error < S , E > Result of an unknown error during a network request (e.g. Serialization errors) Constructors UnknownError [jvm] fun UnknownError (error: Throwable , response: Response<*>?) Properties Name Summary body [jvm] open override val body : E ? = null Always null for an UnknownError code [jvm] val code : Int ? The status code returned by the server. error [jvm] open override val error : Throwable The underlying error of the failed network request, if available. headers [jvm] val headers : Headers? The headers returned by the server. response [jvm] val response : Response<*>?","title":"Index"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/#unknownerror","text":"[jvm]\\ data class UnknownError < S , E >(error: Throwable , response: Response<*>?) : NetworkResponse.Error < S , E > Result of an unknown error during a network request (e.g. Serialization errors)","title":"UnknownError"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/#constructors","text":"UnknownError [jvm] fun UnknownError (error: Throwable , response: Response<*>?)","title":"Constructors"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/#properties","text":"Name Summary body [jvm] open override val body : E ? = null Always null for an UnknownError code [jvm] val code : Int ? The status code returned by the server. error [jvm] open override val error : Throwable The underlying error of the failed network request, if available. headers [jvm] val headers : Headers? The headers returned by the server. response [jvm] val response : Response<*>?","title":"Properties"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/-unknown-error/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / UnknownError / UnknownError UnknownError [jvm]\\ fun UnknownError (error: Throwable , response: Response<*>?)","title":" unknown error"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/-unknown-error/#unknownerror","text":"[jvm]\\ fun UnknownError (error: Throwable , response: Response<*>?)","title":"UnknownError"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/body/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / UnknownError / body body [jvm]\\ open override val body : E ? = null Always null for an UnknownError","title":"Body"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/body/#body","text":"[jvm]\\ open override val body : E ? = null Always null for an UnknownError","title":"body"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/code/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / UnknownError / code code [jvm]\\ val code : Int ? The status code returned by the server. Alias for Response.code of the original response","title":"Code"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/code/#code","text":"[jvm]\\ val code : Int ? The status code returned by the server. Alias for Response.code of the original response","title":"code"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/error/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / UnknownError / error error [jvm]\\ open override val error : Throwable The underlying error of the failed network request, if available.","title":"Error"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/error/#error","text":"[jvm]\\ open override val error : Throwable The underlying error of the failed network request, if available.","title":"error"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/headers/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / UnknownError / headers headers [jvm]\\ val headers : Headers? The headers returned by the server. Alias for Response.headers of the original response","title":"Headers"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/headers/#headers","text":"[jvm]\\ val headers : Headers? The headers returned by the server. Alias for Response.headers of the original response","title":"headers"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/response/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponse / UnknownError / response response [jvm]\\ val response : Response<*>?","title":"Response"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/response/#response","text":"[jvm]\\ val response : Response<*>?","title":"response"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter-factory/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponseAdapterFactory NetworkResponseAdapterFactory [jvm]\\ class NetworkResponseAdapterFactory : CallAdapter.Factory A Call Adapter Factory for Retrofit service methods that return NetworkResponse<S, E> or Deferred<NetworkResponse<S, E>>. For the returnType parameter of NetworkResponseAdapterFactory.get we expect to receive either a Call<NetworkResponse<..., ...>> (for suspending functions) or a Deferred<NetworkResponse<...,...>> (for deferred functions). Bare NetworkResponse<..., ...> or other return types are not supported, and produce a null result. Constructors NetworkResponseAdapterFactory [jvm] fun NetworkResponseAdapterFactory () Functions Name Summary get [jvm] open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >?","title":"Index"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter-factory/#networkresponseadapterfactory","text":"[jvm]\\ class NetworkResponseAdapterFactory : CallAdapter.Factory A Call Adapter Factory for Retrofit service methods that return NetworkResponse<S, E> or Deferred<NetworkResponse<S, E>>. For the returnType parameter of NetworkResponseAdapterFactory.get we expect to receive either a Call<NetworkResponse<..., ...>> (for suspending functions) or a Deferred<NetworkResponse<...,...>> (for deferred functions). Bare NetworkResponse<..., ...> or other return types are not supported, and produce a null result.","title":"NetworkResponseAdapterFactory"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter-factory/#constructors","text":"NetworkResponseAdapterFactory [jvm] fun NetworkResponseAdapterFactory ()","title":"Constructors"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter-factory/#functions","text":"Name Summary get [jvm] open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >?","title":"Functions"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter-factory/-network-response-adapter-factory/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponseAdapterFactory / NetworkResponseAdapterFactory NetworkResponseAdapterFactory [jvm]\\ fun NetworkResponseAdapterFactory ()","title":" network response adapter factory"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter-factory/-network-response-adapter-factory/#networkresponseadapterfactory","text":"[jvm]\\ fun NetworkResponseAdapterFactory ()","title":"NetworkResponseAdapterFactory"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter-factory/get/","text":"// NetworkResponseAdapter / com.haroldadmin.cnradapter / NetworkResponseAdapterFactory / get get [jvm]\\ open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >?","title":"Get"},{"location":"api/-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter-factory/get/#get","text":"[jvm]\\ open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >?","title":"get"},{"location":"upgrade-guides/v5/","text":"Upgrade Guide for v5 The 5.0 release of NetworkResponseAdapter is an overhaul of the internals of the library. Most users should be able to update the version number in their dependencies without any other changes. Contributors Huge thanks to community members Gil Goldzweig and Leandro for their help with this release. Changes Breaking Removal of deprecated CoroutinesNetworkResponseAdapterFactory and CoroutinesNetworkResponseAdapter classes. These classes had been deprecated for a very long time. v5 removes them from the codebase. If you're still using them, please move to NetworkResponseAdapterFactory and NetworkResponseAdapter classes as a replacement. Backward Compatible (Non-Breaking) Migration to a sealed interface for the NetworkResponse type Sealed interfaces allow more succinct when expressions if you don't care about the specific type of the error. when ( response ) { is NetworkResponse . Success -> // ... is NetworkResponse . Error -> // ... } You can still access the full range of subtypes if you need to: when ( response ) { is NetworkResponse . Success -> // ... is NetworkResponse . ServerError -> // ... is NetworkResponse . NetworkError -> // ... is NetworkResponse . UnknownError -> // ... } Attention This can be a potentially breaking change if you relied on sealed class specific behaviour of NetworkResponse . Most users will not be affected it. Bundled Retrofit responses: NetworkResponse.Success , NetworkResponse.ServerError and NetworkResponse.UnknownError now bundle the original Retrofit response with them (when it is available). This allows you to look at the raw response directly, if needed. when ( networkResponse ) { is NetworkResponse . Success -> { val retrofitResponse = networkResponse . response } } Tests Overhaul & Migration to Kotest This PR gets refactors the library's test suite to get rid of redundant and obscure tests, and replaces them with a streamlined test suite focused on publicly exposed functionality. We've also finally moved away from the deprecated kotlintest artifacts to the new kotest libraries. Kotlin 1.6 The library now depends on Kotlin 1.6 New Sample App The repository now includes a sample app to demonstrate the usage of this library with Retrofit and the kotlinx.serialization library.","title":"v5"},{"location":"upgrade-guides/v5/#upgrade-guide-for-v5","text":"The 5.0 release of NetworkResponseAdapter is an overhaul of the internals of the library. Most users should be able to update the version number in their dependencies without any other changes.","title":"Upgrade Guide for v5"},{"location":"upgrade-guides/v5/#contributors","text":"Huge thanks to community members Gil Goldzweig and Leandro for their help with this release.","title":"Contributors"},{"location":"upgrade-guides/v5/#changes","text":"","title":"Changes"},{"location":"upgrade-guides/v5/#breaking","text":"Removal of deprecated CoroutinesNetworkResponseAdapterFactory and CoroutinesNetworkResponseAdapter classes. These classes had been deprecated for a very long time. v5 removes them from the codebase. If you're still using them, please move to NetworkResponseAdapterFactory and NetworkResponseAdapter classes as a replacement.","title":"Breaking"},{"location":"upgrade-guides/v5/#backward-compatible-non-breaking","text":"Migration to a sealed interface for the NetworkResponse type Sealed interfaces allow more succinct when expressions if you don't care about the specific type of the error. when ( response ) { is NetworkResponse . Success -> // ... is NetworkResponse . Error -> // ... } You can still access the full range of subtypes if you need to: when ( response ) { is NetworkResponse . Success -> // ... is NetworkResponse . ServerError -> // ... is NetworkResponse . NetworkError -> // ... is NetworkResponse . UnknownError -> // ... } Attention This can be a potentially breaking change if you relied on sealed class specific behaviour of NetworkResponse . Most users will not be affected it. Bundled Retrofit responses: NetworkResponse.Success , NetworkResponse.ServerError and NetworkResponse.UnknownError now bundle the original Retrofit response with them (when it is available). This allows you to look at the raw response directly, if needed. when ( networkResponse ) { is NetworkResponse . Success -> { val retrofitResponse = networkResponse . response } } Tests Overhaul & Migration to Kotest This PR gets refactors the library's test suite to get rid of redundant and obscure tests, and replaces them with a streamlined test suite focused on publicly exposed functionality. We've also finally moved away from the deprecated kotlintest artifacts to the new kotest libraries. Kotlin 1.6 The library now depends on Kotlin 1.6 New Sample App The repository now includes a sample app to demonstrate the usage of this library with Retrofit and the kotlinx.serialization library.","title":"Backward Compatible (Non-Breaking)"}]}