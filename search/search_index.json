{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NetworkResponseAdapter Introduction This library provides a Retrofit call adapter to handle errors as a part of state. It helps you write cleaner code for network requests by treating errors as values, instead of exceptions. Network Response NetworkResponse<S, E> is a Kotlin sealed class with the following states: Success: Represents successful responses (2xx response codes) ServerError: Represents Server errors NetworkError: Represents connectivity errors UnknownError: Represents every other kind of error which can not be classified as an API error or a network problem (eg JSON deserialization exceptions) It is generic on two types: a response ( S ), and an error ( E ). The response type is your Java/Kotlin representation of the API response, while the error type represents the error response sent by the API. Example data class DetailsResponse ( val details : String ) data class DetailsError ( val errorMessage : String ) interface Api { @Get ( \"/details\" ) suspend fun details (): NetworkResponse < DetailsResponse , DetailsError > } class ViewModel { suspend fun fetchDetails () { when ( val response = api . details ()) { is NetworkResponse . Success -> handleSuccess ( response . body ) is NetworkResponse . ServerError -> handleServerError ( response . code ) is NetworkResponse . NetworkError -> handleNetworkError ( response . error ) is NetworkResponse . UnknownError -> handleUnknownError ( response . error ) } } } Installation Add the Jitpack repository to your list of repositories: allprojects { repositories { maven { url 'https://jitpack.io' } } } Then add the dependency in your gradle file: dependencies { implementation \"com.github.haroldadmin:NetworkResponseAdapter:(latest-version)\" } And finally, register NetworkResponseAdapter with Retrofit: val retrofit = Retrofit . Builder () . addCallAdapterFactory ( NetworkResponseAdapterFactory ()) ... // Other config . build () Note This library uses OkHttp 4, which requires Android API version 21+ and Java 8+. License Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Introduction"},{"location":"#networkresponseadapter","text":"","title":"NetworkResponseAdapter"},{"location":"#introduction","text":"This library provides a Retrofit call adapter to handle errors as a part of state. It helps you write cleaner code for network requests by treating errors as values, instead of exceptions.","title":"Introduction"},{"location":"#network-response","text":"NetworkResponse<S, E> is a Kotlin sealed class with the following states: Success: Represents successful responses (2xx response codes) ServerError: Represents Server errors NetworkError: Represents connectivity errors UnknownError: Represents every other kind of error which can not be classified as an API error or a network problem (eg JSON deserialization exceptions) It is generic on two types: a response ( S ), and an error ( E ). The response type is your Java/Kotlin representation of the API response, while the error type represents the error response sent by the API.","title":"Network Response"},{"location":"#example","text":"data class DetailsResponse ( val details : String ) data class DetailsError ( val errorMessage : String ) interface Api { @Get ( \"/details\" ) suspend fun details (): NetworkResponse < DetailsResponse , DetailsError > } class ViewModel { suspend fun fetchDetails () { when ( val response = api . details ()) { is NetworkResponse . Success -> handleSuccess ( response . body ) is NetworkResponse . ServerError -> handleServerError ( response . code ) is NetworkResponse . NetworkError -> handleNetworkError ( response . error ) is NetworkResponse . UnknownError -> handleUnknownError ( response . error ) } } }","title":"Example"},{"location":"#installation","text":"Add the Jitpack repository to your list of repositories: allprojects { repositories { maven { url 'https://jitpack.io' } } } Then add the dependency in your gradle file: dependencies { implementation \"com.github.haroldadmin:NetworkResponseAdapter:(latest-version)\" } And finally, register NetworkResponseAdapter with Retrofit: val retrofit = Retrofit . Builder () . addCallAdapterFactory ( NetworkResponseAdapterFactory ()) ... // Other config . build () Note This library uses OkHttp 4, which requires Android API version 21+ and Java 8+.","title":"Installation"},{"location":"#license","text":"Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"benefits/","text":"Benefits Modelling errors as a part of your state is a recommended practice. This library helps you deal with scenarios where you can successfully recover from errors, and extract meaningful information from them too! NetworkResponseAdapter provides a much cleaner solution than Retrofit's built in Call type for dealing with errors. Call throws an exception on any kind of an error, leaving it up to you to catch it and parse it manually to figure out what went wrong. NetworkResponseAdapter does all of that for you and returns the result in an easily consumable NetworkResponse subtype. The RxJava retrofit adapter treats non 2xx response codes as errors, which seems silly in the context of Rx where errors terminate streams. Also, just like the Call<T> type, it makes you deal with all types of errors in an onError callback, where you have to manually parse it to find out exactly what went wrong. Using the Response class provided by Retrofit is cumbersome, as you have to manually parse error bodies with it.","title":"Benefits"},{"location":"benefits/#benefits","text":"Modelling errors as a part of your state is a recommended practice. This library helps you deal with scenarios where you can successfully recover from errors, and extract meaningful information from them too! NetworkResponseAdapter provides a much cleaner solution than Retrofit's built in Call type for dealing with errors. Call throws an exception on any kind of an error, leaving it up to you to catch it and parse it manually to figure out what went wrong. NetworkResponseAdapter does all of that for you and returns the result in an easily consumable NetworkResponse subtype. The RxJava retrofit adapter treats non 2xx response codes as errors, which seems silly in the context of Rx where errors terminate streams. Also, just like the Call<T> type, it makes you deal with all types of errors in an onError callback, where you have to manually parse it to find out exactly what went wrong. Using the Response class provided by Retrofit is cumbersome, as you have to manually parse error bodies with it.","title":"Benefits"},{"location":"extensions/","text":"Extensions Overloaded Invoke operator NetworkResponse also has an overloaded invoke operator. It returns the underlying data if the response is NetworkResponse.Success , or null otherwise. val usersResponse = usersRepo . getUsers (). await () println ( usersResponse () ?: \"No users were found\" ) Retrying network requests The executeWithRetry method shipped with this library can help you retry a network request without any boilerplate: suspend fun fetchDetails () { val response = executeWithRetry ( times = 5 ) { api . getDetails () } }","title":"Extensions"},{"location":"extensions/#extensions","text":"","title":"Extensions"},{"location":"extensions/#overloaded-invoke-operator","text":"NetworkResponse also has an overloaded invoke operator. It returns the underlying data if the response is NetworkResponse.Success , or null otherwise. val usersResponse = usersRepo . getUsers (). await () println ( usersResponse () ?: \"No users were found\" )","title":"Overloaded Invoke operator"},{"location":"extensions/#retrying-network-requests","text":"The executeWithRetry method shipped with this library can help you retry a network request without any boilerplate: suspend fun fetchDetails () { val response = executeWithRetry ( times = 5 ) { api . getDetails () } }","title":"Retrying network requests"},{"location":"special-cases/","text":"Special Cases Handling empty response bodies This library assumes that your server returns a parse-able response body even if the request fails. Empty bodies are treated as a server error. However, some operations rely solely on the returned response code. In such cases, the body is usually empty. Such endpoints must use Unit as the response type: suspend fun updateStatusOnServer (): NetworkResponse < Unit , ErrorType > Handling primitive responses The most common format for sending data over the wire is JSON. However, not all responses need JSON objects as sometimes primitive string suffice. To support a wide variety of response types, Retrofit supports adding custom converters. One such converter is the Scalars Converter which can handle primitive response types. To use it, use a primitive as your response type: interface Api { @GET ( \"/details\" ) suspend fun details (): NetworkResponse < String , String > } And then make sure that the Scalars converter is added to Retrofit before the JSON converter: val retrofit = Retrofit . Builder () . addCallAdapterFactory ( NetworkResponseAdapterFactory ()) . addConverterFactory ( ScalarsConverterFactory . create ()) . addConverterFactory ( MoshiConverterFactory . create ( moshi )) . baseUrl ( \"...\" ) . build () Status code and Headers in NetworkResponse.UnknownError Network requests that result in a NetworkResponse.UnknownError can still convey useful information through their headers and status code. Unfortunately, it is not always possible to extract these values from a failed request. Therefore, the NetworkResponse.UnknownError class contains nullable fields for the status code and headers. These fields are populated if their values can be extract from a failed request. data class UnknownError ( val error : Throwable , val code : Int? = null , val headers : Headers? = null , ) : NetworkResponse < Nothing , Nothing > () It is possible to extract this information from a failed request in most cases. However, if the server responds with a successful status code (200 <= code < 300) and an invalid body (which can not be parsed correctly), Retrofit assumes the network request failed. It forwards only the raised error and the original call to the registered call adapter, and thus all information about the response is lost resulting in a NetworkResponse.UnknownError with null code and headers .","title":"Special Cases"},{"location":"special-cases/#special-cases","text":"","title":"Special Cases"},{"location":"special-cases/#handling-empty-response-bodies","text":"This library assumes that your server returns a parse-able response body even if the request fails. Empty bodies are treated as a server error. However, some operations rely solely on the returned response code. In such cases, the body is usually empty. Such endpoints must use Unit as the response type: suspend fun updateStatusOnServer (): NetworkResponse < Unit , ErrorType >","title":"Handling empty response bodies"},{"location":"special-cases/#handling-primitive-responses","text":"The most common format for sending data over the wire is JSON. However, not all responses need JSON objects as sometimes primitive string suffice. To support a wide variety of response types, Retrofit supports adding custom converters. One such converter is the Scalars Converter which can handle primitive response types. To use it, use a primitive as your response type: interface Api { @GET ( \"/details\" ) suspend fun details (): NetworkResponse < String , String > } And then make sure that the Scalars converter is added to Retrofit before the JSON converter: val retrofit = Retrofit . Builder () . addCallAdapterFactory ( NetworkResponseAdapterFactory ()) . addConverterFactory ( ScalarsConverterFactory . create ()) . addConverterFactory ( MoshiConverterFactory . create ( moshi )) . baseUrl ( \"...\" ) . build ()","title":"Handling primitive responses"},{"location":"special-cases/#status-code-and-headers-in-networkresponseunknownerror","text":"Network requests that result in a NetworkResponse.UnknownError can still convey useful information through their headers and status code. Unfortunately, it is not always possible to extract these values from a failed request. Therefore, the NetworkResponse.UnknownError class contains nullable fields for the status code and headers. These fields are populated if their values can be extract from a failed request. data class UnknownError ( val error : Throwable , val code : Int? = null , val headers : Headers? = null , ) : NetworkResponse < Nothing , Nothing > () It is possible to extract this information from a failed request in most cases. However, if the server responds with a successful status code (200 <= code < 300) and an invalid body (which can not be parsed correctly), Retrofit assumes the network request failed. It forwards only the raised error and the original call to the registered call adapter, and thus all information about the response is lost resulting in a NetworkResponse.UnknownError with null code and headers .","title":"Status code and Headers in NetworkResponse.UnknownError"},{"location":"api/dokka/","text":"// coroutines-network-response-adapter coroutines-network-response-adapter Packages Name com.haroldadmin.cnradapter","title":"Index"},{"location":"api/dokka/#coroutines-network-response-adapter","text":"","title":"coroutines-network-response-adapter"},{"location":"api/dokka/#packages","text":"Name com.haroldadmin.cnradapter","title":"Packages"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter Package com.haroldadmin.cnradapter Types Name Summary CoroutinesNetworkResponseAdapterFactory [jvm] Content ~~class~~ ~~CoroutinesNetworkResponseAdapterFactory~~ ~~:~~ ~~CallAdapter.Factory~~ More info A Factory class to create instances of CoroutinesNetworkResponseAdapter NetworkResponse [jvm] Content sealed class NetworkResponse T : Any , out U : Any > NetworkResponseAdapter [jvm] Content class NetworkResponseAdapter < S : Any , E : Any >( successType : Type , errorBodyConverter : Converter E >) : CallAdapter< S , Call< NetworkResponse < S , E >>> NetworkResponseAdapterFactory [jvm] Content class NetworkResponseAdapterFactory : CallAdapter.Factory Functions Name Summary executeWithRetry [jvm] Content inline suspend fun < T : Any , U : Any > executeWithRetry (times: Int = 10, initialDelay: Long = 100, maxDelay: Long = 1000, factor: Double = 2.0, block: suspend () -> NetworkResponse < T , U >): NetworkResponse < T , U > More info Retries the given block for the specified number of times in the case of NetworkResponse.NetworkError invoke [jvm] Content operator fun < T : Any , U : Any > NetworkResponse < T , U >. invoke (): T ? More info Overloaded invoke operator to get the successful body or null in NetworkResponse class","title":"Index"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/#package-comharoldadmincnradapter","text":"","title":"Package com.haroldadmin.cnradapter"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/#types","text":"Name Summary CoroutinesNetworkResponseAdapterFactory [jvm] Content ~~class~~ ~~CoroutinesNetworkResponseAdapterFactory~~ ~~:~~ ~~CallAdapter.Factory~~ More info A Factory class to create instances of CoroutinesNetworkResponseAdapter NetworkResponse [jvm] Content sealed class NetworkResponse T : Any , out U : Any > NetworkResponseAdapter [jvm] Content class NetworkResponseAdapter < S : Any , E : Any >( successType : Type , errorBodyConverter : Converter E >) : CallAdapter< S , Call< NetworkResponse < S , E >>> NetworkResponseAdapterFactory [jvm] Content class NetworkResponseAdapterFactory : CallAdapter.Factory","title":"Types"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/#functions","text":"Name Summary executeWithRetry [jvm] Content inline suspend fun < T : Any , U : Any > executeWithRetry (times: Int = 10, initialDelay: Long = 100, maxDelay: Long = 1000, factor: Double = 2.0, block: suspend () -> NetworkResponse < T , U >): NetworkResponse < T , U > More info Retries the given block for the specified number of times in the case of NetworkResponse.NetworkError invoke [jvm] Content operator fun < T : Any , U : Any > NetworkResponse < T , U >. invoke (): T ? More info Overloaded invoke operator to get the successful body or null in NetworkResponse class","title":"Functions"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/execute-with-retry/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / executeWithRetry executeWithRetry [jvm] Content inline suspend fun < T : Any , U : Any > executeWithRetry (times: Int = 10, initialDelay: Long = 100, maxDelay: Long = 1000, factor: Double = 2.0, block: suspend () -> NetworkResponse < T , U >): NetworkResponse < T , U > More info Retries the given block for the specified number of times in the case of NetworkResponse.NetworkError Return The NetworkResponse value whether it be successful or failed after retrying Parameters jvm T The success body type of NetworkResponse U The error body type of NetworkResponse times The number of times this request should be retried initialDelay The initial amount of time to wait before retrying maxDelay The max amount of time to wait before retrying factor Multiply current delay time with this on each retry block The suspending function to be retried","title":"Execute with retry"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/execute-with-retry/#executewithretry","text":"[jvm] Content inline suspend fun < T : Any , U : Any > executeWithRetry (times: Int = 10, initialDelay: Long = 100, maxDelay: Long = 1000, factor: Double = 2.0, block: suspend () -> NetworkResponse < T , U >): NetworkResponse < T , U > More info Retries the given block for the specified number of times in the case of NetworkResponse.NetworkError","title":"executeWithRetry"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/execute-with-retry/#return","text":"The NetworkResponse value whether it be successful or failed after retrying","title":"Return"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/execute-with-retry/#parameters","text":"jvm T The success body type of NetworkResponse U The error body type of NetworkResponse times The number of times this request should be retried initialDelay The initial amount of time to wait before retrying maxDelay The max amount of time to wait before retrying factor Multiply current delay time with this on each retry block The suspending function to be retried","title":"Parameters"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/invoke/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / invoke invoke [jvm] Content operator fun < T : Any , U : Any > NetworkResponse < T , U >. invoke (): T ? More info Overloaded invoke operator to get the successful body or null in NetworkResponse class Parameters jvm T the success body type of NetworkResponse U the error body type of NetworkResponse Example: val usersResponse = executeWithRetry { getUsers() } println(usersResponse() ?: \"No users found\")","title":"Invoke"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/invoke/#invoke","text":"[jvm] Content operator fun < T : Any , U : Any > NetworkResponse < T , U >. invoke (): T ? More info Overloaded invoke operator to get the successful body or null in NetworkResponse class","title":"invoke"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/invoke/#parameters","text":"jvm T the success body type of NetworkResponse U the error body type of NetworkResponse Example: val usersResponse = executeWithRetry { getUsers() } println(usersResponse() ?: \"No users found\")","title":"Parameters"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / CoroutinesNetworkResponseAdapterFactory CoroutinesNetworkResponseAdapterFactory [jvm] ~~class~~ ~~CoroutinesNetworkResponseAdapterFactory~~ ~~:~~ ~~CallAdapter.Factory~~ A Factory class to create instances of CoroutinesNetworkResponseAdapter Types Name Summary Companion [jvm] Content object Companion Functions Name Summary get [jvm] Content open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >? More info Returns the Network Response call adapter if it is appropriate, or null otherwise","title":"Index"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/#coroutinesnetworkresponseadapterfactory","text":"[jvm] ~~class~~ ~~CoroutinesNetworkResponseAdapterFactory~~ ~~:~~ ~~CallAdapter.Factory~~ A Factory class to create instances of CoroutinesNetworkResponseAdapter","title":"CoroutinesNetworkResponseAdapterFactory"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/#functions","text":"Name Summary get [jvm] Content open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >? More info Returns the Network Response call adapter if it is appropriate, or null otherwise","title":"Functions"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/get/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / CoroutinesNetworkResponseAdapterFactory / get get [jvm] Content open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >? More info Returns the Network Response call adapter if it is appropriate, or null otherwise","title":"Get"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/get/#get","text":"[jvm] Content open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >? More info Returns the Network Response call adapter if it is appropriate, or null otherwise","title":"get"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/-companion/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / CoroutinesNetworkResponseAdapterFactory / Companion Companion [jvm] object Companion Functions Name Summary invoke [jvm] Content @ JvmStatic () @ JvmName (name = create) operator fun invoke (): CoroutinesNetworkResponseAdapterFactory","title":"Index"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/-companion/#functions","text":"Name Summary invoke [jvm] Content @ JvmStatic () @ JvmName (name = create) operator fun invoke (): CoroutinesNetworkResponseAdapterFactory","title":"Functions"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/-companion/invoke/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / CoroutinesNetworkResponseAdapterFactory / Companion / invoke invoke [jvm] Content @ JvmStatic () @ JvmName (name = create) operator fun invoke (): CoroutinesNetworkResponseAdapterFactory","title":"Invoke"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-coroutines-network-response-adapter-factory/-companion/invoke/#invoke","text":"[jvm] Content @ JvmStatic () @ JvmName (name = create) operator fun invoke (): CoroutinesNetworkResponseAdapterFactory","title":"invoke"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse NetworkResponse [jvm] sealed class NetworkResponse T : Any , out U : Any > Types Name Summary Error [jvm] Content interface Error More info Describe an error without a specific type. NetworkError [jvm] Content data class NetworkError ( error : IOException ) : NetworkResponse < Nothing , Nothing > , NetworkResponse.Error More info A request that didn't result in a response. ServerError [jvm] Content data class ServerError < U : Any >( body : U ?, code : Int , headers : Headers?) : NetworkResponse < Nothing , U > , NetworkResponse.Error More info A request that resulted in a response with a non-2xx status code. Success [jvm] Content data class Success < T : Any >( body : T , headers : Headers?, code : Int ) : NetworkResponse < T , Nothing > More info A request that resulted in a response with a 2xx status code that has a body. UnknownError [jvm] Content data class UnknownError ( error : Throwable , code : Int ?, headers : Headers?) : NetworkResponse < Nothing , Nothing > , NetworkResponse.Error More info A request that resulted in an error different from an IO or Server error. Inheritors Name NetworkResponse NetworkResponse NetworkResponse NetworkResponse Extensions Name Summary invoke [jvm] Content operator fun < T : Any , U : Any > NetworkResponse < T , U >. invoke (): T ? More info Overloaded invoke operator to get the successful body or null in NetworkResponse class","title":"Index"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/#networkresponse","text":"[jvm] sealed class NetworkResponse T : Any , out U : Any >","title":"NetworkResponse"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/#types","text":"Name Summary Error [jvm] Content interface Error More info Describe an error without a specific type. NetworkError [jvm] Content data class NetworkError ( error : IOException ) : NetworkResponse < Nothing , Nothing > , NetworkResponse.Error More info A request that didn't result in a response. ServerError [jvm] Content data class ServerError < U : Any >( body : U ?, code : Int , headers : Headers?) : NetworkResponse < Nothing , U > , NetworkResponse.Error More info A request that resulted in a response with a non-2xx status code. Success [jvm] Content data class Success < T : Any >( body : T , headers : Headers?, code : Int ) : NetworkResponse < T , Nothing > More info A request that resulted in a response with a 2xx status code that has a body. UnknownError [jvm] Content data class UnknownError ( error : Throwable , code : Int ?, headers : Headers?) : NetworkResponse < Nothing , Nothing > , NetworkResponse.Error More info A request that resulted in an error different from an IO or Server error.","title":"Types"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/#inheritors","text":"Name NetworkResponse NetworkResponse NetworkResponse NetworkResponse","title":"Inheritors"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/#extensions","text":"Name Summary invoke [jvm] Content operator fun < T : Any , U : Any > NetworkResponse < T , U >. invoke (): T ? More info Overloaded invoke operator to get the successful body or null in NetworkResponse class","title":"Extensions"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-error/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / Error Error [jvm] interface Error Describe an error without a specific type. Makes it easier to deal with the case where you just want to know that an error occurred, without knowing the type Properties Name Summary error [jvm] abstract val error : Throwable Inheritors Name NetworkResponse NetworkResponse NetworkResponse","title":"Index"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-error/#error","text":"[jvm] interface Error Describe an error without a specific type. Makes it easier to deal with the case where you just want to know that an error occurred, without knowing the type","title":"Error"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-error/#properties","text":"Name Summary error [jvm] abstract val error : Throwable","title":"Properties"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-error/#inheritors","text":"Name NetworkResponse NetworkResponse NetworkResponse","title":"Inheritors"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-error/error/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / Error / error error [jvm] Content abstract val error : Throwable","title":"Error"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-error/error/#error","text":"[jvm] Content abstract val error : Throwable","title":"error"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-network-error/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / NetworkError NetworkError [jvm] data class NetworkError ( error : IOException ) : NetworkResponse < Nothing , Nothing > , NetworkResponse.Error A request that didn't result in a response. Constructors NetworkError [jvm] fun NetworkError (error: IOException ) Properties Name Summary error [jvm] open override val error : IOException","title":"Index"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-network-error/#networkerror","text":"[jvm] data class NetworkError ( error : IOException ) : NetworkResponse < Nothing , Nothing > , NetworkResponse.Error A request that didn't result in a response.","title":"NetworkError"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-network-error/#constructors","text":"NetworkError [jvm] fun NetworkError (error: IOException )","title":"Constructors"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-network-error/#properties","text":"Name Summary error [jvm] open override val error : IOException","title":"Properties"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-network-error/-network-error/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / NetworkError / NetworkError NetworkError [jvm] Content fun NetworkError (error: IOException )","title":" network error"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-network-error/-network-error/#networkerror","text":"[jvm] Content fun NetworkError (error: IOException )","title":"NetworkError"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-network-error/error/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / NetworkError / error error [jvm] Content open override val error : IOException","title":"Error"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-network-error/error/#error","text":"[jvm] Content open override val error : IOException","title":"error"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / ServerError ServerError [jvm] data class ServerError < U : Any >( body : U ?, code : Int , headers : Headers?) : NetworkResponse < Nothing , U > , NetworkResponse.Error A request that resulted in a response with a non-2xx status code. Constructors ServerError [jvm] fun < U : Any > ServerError (body: U ?, code: Int , headers: Headers? = null) Properties Name Summary body [jvm] val body : U ? code [jvm] val code : Int error [jvm] open override val error : IOException headers [jvm] val headers : Headers? = null","title":"Index"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/#servererror","text":"[jvm] data class ServerError < U : Any >( body : U ?, code : Int , headers : Headers?) : NetworkResponse < Nothing , U > , NetworkResponse.Error A request that resulted in a response with a non-2xx status code.","title":"ServerError"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/#constructors","text":"ServerError [jvm] fun < U : Any > ServerError (body: U ?, code: Int , headers: Headers? = null)","title":"Constructors"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/#properties","text":"Name Summary body [jvm] val body : U ? code [jvm] val code : Int error [jvm] open override val error : IOException headers [jvm] val headers : Headers? = null","title":"Properties"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/-server-error/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / ServerError / ServerError ServerError [jvm] Content fun < U : Any > ServerError (body: U ?, code: Int , headers: Headers? = null)","title":" server error"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/-server-error/#servererror","text":"[jvm] Content fun < U : Any > ServerError (body: U ?, code: Int , headers: Headers? = null)","title":"ServerError"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/body/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / ServerError / body body [jvm] Content val body : U ?","title":"Body"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/body/#body","text":"[jvm] Content val body : U ?","title":"body"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/code/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / ServerError / code code [jvm] Content val code : Int","title":"Code"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/code/#code","text":"[jvm] Content val code : Int","title":"code"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/error/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / ServerError / error error [jvm] Content open override val error : IOException","title":"Error"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/error/#error","text":"[jvm] Content open override val error : IOException","title":"error"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/headers/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / ServerError / headers headers [jvm] Content val headers : Headers? = null","title":"Headers"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-server-error/headers/#headers","text":"[jvm] Content val headers : Headers? = null","title":"headers"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / Success Success [jvm] data class Success < T : Any >( body : T , headers : Headers?, code : Int ) : NetworkResponse < T , Nothing > A request that resulted in a response with a 2xx status code that has a body. Constructors Success [jvm] fun < T : Any > Success (body: T , headers: Headers? = null, code: Int ) Properties Name Summary body [jvm] val body : T code [jvm] val code : Int headers [jvm] val headers : Headers? = null","title":"Index"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/#success","text":"[jvm] data class Success < T : Any >( body : T , headers : Headers?, code : Int ) : NetworkResponse < T , Nothing > A request that resulted in a response with a 2xx status code that has a body.","title":"Success"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/#constructors","text":"Success [jvm] fun < T : Any > Success (body: T , headers: Headers? = null, code: Int )","title":"Constructors"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/#properties","text":"Name Summary body [jvm] val body : T code [jvm] val code : Int headers [jvm] val headers : Headers? = null","title":"Properties"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/-success/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / Success / Success Success [jvm] Content fun < T : Any > Success (body: T , headers: Headers? = null, code: Int )","title":" success"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/-success/#success","text":"[jvm] Content fun < T : Any > Success (body: T , headers: Headers? = null, code: Int )","title":"Success"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/body/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / Success / body body [jvm] Content val body : T","title":"Body"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/body/#body","text":"[jvm] Content val body : T","title":"body"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/code/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / Success / code code [jvm] Content val code : Int","title":"Code"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/code/#code","text":"[jvm] Content val code : Int","title":"code"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/headers/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / Success / headers headers [jvm] Content val headers : Headers? = null","title":"Headers"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-success/headers/#headers","text":"[jvm] Content val headers : Headers? = null","title":"headers"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / UnknownError UnknownError [jvm] data class UnknownError ( error : Throwable , code : Int ?, headers : Headers?) : NetworkResponse < Nothing , Nothing > , NetworkResponse.Error A request that resulted in an error different from an IO or Server error. An example of such an error is JSON parsing exception thrown by a serialization library. Constructors UnknownError [jvm] fun UnknownError (error: Throwable , code: Int ? = null, headers: Headers? = null) Properties Name Summary code [jvm] val code : Int ? = null error [jvm] open override val error : Throwable headers [jvm] val headers : Headers? = null","title":"Index"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/#unknownerror","text":"[jvm] data class UnknownError ( error : Throwable , code : Int ?, headers : Headers?) : NetworkResponse < Nothing , Nothing > , NetworkResponse.Error A request that resulted in an error different from an IO or Server error. An example of such an error is JSON parsing exception thrown by a serialization library.","title":"UnknownError"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/#constructors","text":"UnknownError [jvm] fun UnknownError (error: Throwable , code: Int ? = null, headers: Headers? = null)","title":"Constructors"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/#properties","text":"Name Summary code [jvm] val code : Int ? = null error [jvm] open override val error : Throwable headers [jvm] val headers : Headers? = null","title":"Properties"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/-unknown-error/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / UnknownError / UnknownError UnknownError [jvm] Content fun UnknownError (error: Throwable , code: Int ? = null, headers: Headers? = null)","title":" unknown error"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/-unknown-error/#unknownerror","text":"[jvm] Content fun UnknownError (error: Throwable , code: Int ? = null, headers: Headers? = null)","title":"UnknownError"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/code/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / UnknownError / code code [jvm] Content val code : Int ? = null","title":"Code"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/code/#code","text":"[jvm] Content val code : Int ? = null","title":"code"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/error/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / UnknownError / error error [jvm] Content open override val error : Throwable","title":"Error"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/error/#error","text":"[jvm] Content open override val error : Throwable","title":"error"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/headers/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponse / UnknownError / headers headers [jvm] Content val headers : Headers? = null","title":"Headers"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response/-unknown-error/headers/#headers","text":"[jvm] Content val headers : Headers? = null","title":"headers"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponseAdapter NetworkResponseAdapter [jvm] class NetworkResponseAdapter < S : Any , E : Any >( successType : Type , errorBodyConverter : Converter E >) : CallAdapter< S , Call< NetworkResponse < S , E >>> Functions Name Summary adapt [jvm] Content open override fun adapt (call: Call< S >): Call< NetworkResponse < S , E >> responseType [jvm] Content open override fun responseType (): Type","title":"Index"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter/#networkresponseadapter","text":"[jvm] class NetworkResponseAdapter < S : Any , E : Any >( successType : Type , errorBodyConverter : Converter E >) : CallAdapter< S , Call< NetworkResponse < S , E >>>","title":"NetworkResponseAdapter"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter/#functions","text":"Name Summary adapt [jvm] Content open override fun adapt (call: Call< S >): Call< NetworkResponse < S , E >> responseType [jvm] Content open override fun responseType (): Type","title":"Functions"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter/-network-response-adapter/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponseAdapter / NetworkResponseAdapter NetworkResponseAdapter [jvm] Content fun < E : Any > NetworkResponseAdapter (successType: Type , errorBodyConverter: Converter E >)","title":" network response adapter"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter/-network-response-adapter/#networkresponseadapter","text":"[jvm] Content fun < E : Any > NetworkResponseAdapter (successType: Type , errorBodyConverter: Converter E >)","title":"NetworkResponseAdapter"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter/adapt/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponseAdapter / adapt adapt [jvm] Content open override fun adapt (call: Call< S >): Call< NetworkResponse < S , E >>","title":"Adapt"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter/adapt/#adapt","text":"[jvm] Content open override fun adapt (call: Call< S >): Call< NetworkResponse < S , E >>","title":"adapt"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter/response-type/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponseAdapter / responseType responseType [jvm] Content open override fun responseType (): Type","title":"Response type"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter/response-type/#responsetype","text":"[jvm] Content open override fun responseType (): Type","title":"responseType"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter-factory/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponseAdapterFactory NetworkResponseAdapterFactory [jvm] class NetworkResponseAdapterFactory : CallAdapter.Factory Functions Name Summary get [jvm] Content open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >?","title":"Index"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter-factory/#networkresponseadapterfactory","text":"[jvm] class NetworkResponseAdapterFactory : CallAdapter.Factory","title":"NetworkResponseAdapterFactory"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter-factory/#functions","text":"Name Summary get [jvm] Content open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >?","title":"Functions"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter-factory/-network-response-adapter-factory/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponseAdapterFactory / NetworkResponseAdapterFactory NetworkResponseAdapterFactory [jvm] Content fun NetworkResponseAdapterFactory ()","title":" network response adapter factory"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter-factory/-network-response-adapter-factory/#networkresponseadapterfactory","text":"[jvm] Content fun NetworkResponseAdapterFactory ()","title":"NetworkResponseAdapterFactory"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter-factory/get/","text":"// coroutines-network-response-adapter / com.haroldadmin.cnradapter / NetworkResponseAdapterFactory / get get [jvm] Content open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >?","title":"Get"},{"location":"api/dokka/coroutines-network-response-adapter/com.haroldadmin.cnradapter/-network-response-adapter-factory/get/#get","text":"[jvm] Content open operator override fun get (returnType: Type , annotations: Array < Annotation >, retrofit: Retrofit): CallAdapter< , >?","title":"get"}]}